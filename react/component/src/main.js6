import {appendMboxClass, removeMboxClass, getParams, haveOptionsChanged} from './util';

export function getOffers(component, logger) {
  if (!component.targetState.initialized) {
    logger.error('at-react-component:', 'window.adobe.target namespace is missing');
    return;
  }

  const at = window.adobe.target;

  at.getOffer({
    mbox: component.targetState.mbox,
    params: component.targetState.atParams,
    timeout: component.targetState.timeout,
    success: function (response) {
      at.applyOffer({
        mbox: component.targetState.mbox,
        offer: response,
        selector: component.targetDiv
      });
      component.targetDiv.className = removeMboxClass(component.targetDiv.className);
    },
    error: function (status, error) {
      logger.error('getOffer error: ', error, status);
      component.targetDiv.className = removeMboxClass(component.targetDiv.className);
    }
  });
}

export function getDefaultProps(opts) {
  const DEFAULT_MBOX = 'default-mbox';
  const DEFAULT_TIMEOUT = 3000;
  opts = opts || {};

  return {
    'className': 'mboxDefault',
    'data-mbox': opts.mbox || DEFAULT_MBOX,
    'data-timeout': opts.timeout || DEFAULT_TIMEOUT
  };
}

export function onRender(React, component) {
  component.targetState = {
    initialized: Boolean(window.adobe && window.adobe.target),
    editMode: (component.queryParams.indexOf('mboxEdit') !== -1)
  };

  if (!component.targetState.initialized) {
    return <div {...component.props}>{component.props.children}</div>;
  }

  return <div
    ref={ref => {
      component.targetDiv = ref;
    }}
    {...component.props} className={appendMboxClass(component)}>{component.props.children}
  </div>;
}

export function onComponentMounted(component, logger) {
  if (!component.targetState.initialized) {
    logger.error('at-react-component:', 'window.adobe.target namespace is missing');
    return;
  }

  let targetState = component.targetState;
  targetState.atParams = getParams(component.props);
  targetState.mbox = component.props['data-mbox'];
  targetState.timeout = parseInt(component.props['data-timeout'], 10);

  if (targetState.mbox === 'default-mbox') {
    logger.error('at-react-component:', 'mbox prop must be provided for each Target component!');
    return;
  }

  if (targetState.editMode) {
    return;
  }

  getOffers(component, logger);
}

export function onComponentWillReceiveProps(component, logger, newProps) {
  if (!component.targetState.initialized) {
    logger.error('at-react-component:', 'window.adobe.target namespace is missing');
    return;
  }

  let newMbox = newProps['data-mbox'];
  let newTimeout = parseInt(newProps['data-timeout'], 10);
  let newParams = getParams(newProps);

  if (!haveOptionsChanged(component, newMbox, newTimeout, newParams)) {
    return;
  }

  let targetState = component.targetState;
  targetState.atParams = newParams || targetState.atParams;
  targetState.mbox = newMbox || targetState.mbox;
  targetState.timeout = newTimeout || targetState.timeout;

  if (targetState.editMode) {
    return;
  }

  getOffers(component, logger);
}
