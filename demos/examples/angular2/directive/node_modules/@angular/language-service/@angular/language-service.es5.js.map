{"version":3,"file":"language-service.es5.js","sources":["../../../../packages/language-service/index.ts","../../../../packages/language-service/src/version.ts","../../../../packages/language-service/src/ts_plugin.ts","../../../../packages/language-service/src/typescript_host.ts","../../../../packages/language-service/src/reflector_host.ts","../../../../packages/language-service/src/language_service.ts","../../../../packages/language-service/src/hover.ts","../../../../packages/language-service/src/diagnostics.ts","../../../../packages/language-service/src/definitions.ts","../../../../packages/language-service/src/locate_symbol.ts","../../../../packages/language-service/src/completions.ts","../../../../packages/language-service/src/html_info.ts","../../../../packages/language-service/src/expressions.ts","../../../../packages/language-service/src/utils.ts","../../../../packages/language-service/src/types.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the language service package.\n */\nexport {createLanguageService} from './src/language_service';\nexport * from './src/ts_plugin';\nexport {Completion, Completions, Declaration, Declarations, Definition, Diagnostic, Diagnostics, Hover, HoverTextSection, LanguageService, LanguageServiceHost, Location, Span, TemplateSource, TemplateSources} from './src/types';\nexport {TypeScriptServiceHost, createLanguageServiceFromTypescript} from './src/typescript_host';\nexport {VERSION} from './src/version';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\nimport {Version} from '@angular/core';\n/**\n * @stable\n */\nexport const VERSION = new Version('4.3.1');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ts from 'typescript';\n\nimport {createLanguageService} from './language_service';\nimport {Completion, Diagnostic, LanguageService, LanguageServiceHost} from './types';\nimport {TypeScriptServiceHost} from './typescript_host';\n\nconst projectHostMap = new WeakMap<any, TypeScriptServiceHost>();\n\nexport function getExternalFiles(project: any): string[]|undefined {\n  const host = projectHostMap.get(project);\n  if (host) {\n    return host.getTemplateReferences();\n  }\n}\n\nconst angularOnlyResults = process.argv.indexOf('--angularOnlyResults') >= 0;\n\nfunction angularOnlyFilter(ls: ts.LanguageService): ts.LanguageService {\n  return {\n    cleanupSemanticCache: () => ls.cleanupSemanticCache(),\n    getSyntacticDiagnostics: fileName => <ts.Diagnostic[]>[],\n    getSemanticDiagnostics: fileName => <ts.Diagnostic[]>[],\n    getCompilerOptionsDiagnostics: () => <ts.Diagnostic[]>[],\n    getSyntacticClassifications: (fileName, span) => [],\n    getSemanticClassifications: (fileName, span) => [],\n    getEncodedSyntacticClassifications: (fileName, span) => <ts.Classifications><any>{undefined},\n    getEncodedSemanticClassifications: (fileName, span) => <ts.Classifications><any>undefined,\n    getCompletionsAtPosition: (fileName, position) => <ts.CompletionInfo><any>undefined,\n    getCompletionEntryDetails: (fileName, position, entryName) =>\n                                   <ts.CompletionEntryDetails><any>undefined,\n    getCompletionEntrySymbol: (fileName, position, entryName) => <ts.Symbol><any>undefined,\n    getQuickInfoAtPosition: (fileName, position) => <ts.QuickInfo><any>undefined,\n    getNameOrDottedNameSpan: (fileName, startPos, endPos) => <ts.TextSpan><any>undefined,\n    getBreakpointStatementAtPosition: (fileName, position) => <ts.TextSpan><any>undefined,\n    getSignatureHelpItems: (fileName, position) => <ts.SignatureHelpItems><any>undefined,\n    getRenameInfo: (fileName, position) => <ts.RenameInfo><any>undefined,\n    findRenameLocations: (fileName, position, findInStrings, findInComments) =>\n                             <ts.RenameLocation[]>[],\n    getDefinitionAtPosition: (fileName, position) => <ts.DefinitionInfo[]>[],\n    getTypeDefinitionAtPosition: (fileName, position) => <ts.DefinitionInfo[]>[],\n    getImplementationAtPosition: (fileName, position) => <ts.ImplementationLocation[]>[],\n    getReferencesAtPosition: (fileName: string, position: number) => <ts.ReferenceEntry[]>[],\n    findReferences: (fileName: string, position: number) => <ts.ReferencedSymbol[]>[],\n    getDocumentHighlights: (fileName, position, filesToSearch) => <ts.DocumentHighlights[]>[],\n    /** @deprecated */\n    getOccurrencesAtPosition: (fileName, position) => <ts.ReferenceEntry[]>[],\n    getNavigateToItems: searchValue => <ts.NavigateToItem[]>[],\n    getNavigationBarItems: fileName => <ts.NavigationBarItem[]>[],\n    getNavigationTree: fileName => <ts.NavigationTree><any>undefined,\n    getOutliningSpans: fileName => <ts.OutliningSpan[]>[],\n    getTodoComments: (fileName, descriptors) => <ts.TodoComment[]>[],\n    getBraceMatchingAtPosition: (fileName, position) => <ts.TextSpan[]>[],\n    getIndentationAtPosition: (fileName, position, options) => <number><any>undefined,\n    getFormattingEditsForRange: (fileName, start, end, options) => <ts.TextChange[]>[],\n    getFormattingEditsForDocument: (fileName, options) => <ts.TextChange[]>[],\n    getFormattingEditsAfterKeystroke: (fileName, position, key, options) => <ts.TextChange[]>[],\n    getDocCommentTemplateAtPosition: (fileName, position) => <ts.TextInsertion><any>undefined,\n    isValidBraceCompletionAtPosition: (fileName, position, openingBrace) => <boolean><any>undefined,\n    getCodeFixesAtPosition: (fileName, start, end, errorCodes) => <ts.CodeAction[]>[],\n    getEmitOutput: fileName => <ts.EmitOutput><any>undefined,\n    getProgram: () => ls.getProgram(),\n    dispose: () => ls.dispose()\n  };\n}\n\nexport function create(info: any /* ts.server.PluginCreateInfo */): ts.LanguageService {\n  // Create the proxy\n  const proxy: ts.LanguageService = Object.create(null);\n  let oldLS: ts.LanguageService = info.languageService;\n\n  if (angularOnlyResults) {\n    oldLS = angularOnlyFilter(oldLS);\n  }\n\n  function tryCall<T>(fileName: string | undefined, callback: () => T): T {\n    if (fileName && !oldLS.getProgram().getSourceFile(fileName)) {\n      return undefined as any as T;\n    }\n    try {\n      return callback();\n    } catch (e) {\n      return undefined as any as T;\n    }\n  }\n\n  function tryFilenameCall<T>(m: (fileName: string) => T): (fileName: string) => T {\n    return fileName => tryCall(fileName, () => <T>(m.call(ls, fileName)));\n  }\n\n  function tryFilenameOneCall<T, P>(m: (fileName: string, p: P) => T): (filename: string, p: P) =>\n      T {\n    return (fileName, p) => tryCall(fileName, () => <T>(m.call(ls, fileName, p)));\n  }\n\n  function tryFilenameTwoCall<T, P1, P2>(m: (fileName: string, p1: P1, p2: P2) => T): (\n      filename: string, p1: P1, p2: P2) => T {\n    return (fileName, p1, p2) => tryCall(fileName, () => <T>(m.call(ls, fileName, p1, p2)));\n  }\n\n  function tryFilenameThreeCall<T, P1, P2, P3>(m: (fileName: string, p1: P1, p2: P2, p3: P3) => T):\n      (filename: string, p1: P1, p2: P2, p3: P3) => T {\n    return (fileName, p1, p2, p3) => tryCall(fileName, () => <T>(m.call(ls, fileName, p1, p2, p3)));\n  }\n\n  function tryFilenameFourCall<T, P1, P2, P3, P4>(\n      m: (fileName: string, p1: P1, p2: P2, p3: P3, p4: P4) =>\n          T): (fileName: string, p1: P1, p2: P2, p3: P3, p4: P4) => T {\n    return (fileName, p1, p2, p3, p4) =>\n               tryCall(fileName, () => <T>(m.call(ls, fileName, p1, p2, p3, p4)));\n  }\n\n  function typescriptOnly(ls: ts.LanguageService): ts.LanguageService {\n    return {\n      cleanupSemanticCache: () => ls.cleanupSemanticCache(),\n      getSyntacticDiagnostics: tryFilenameCall(ls.getSyntacticDiagnostics),\n      getSemanticDiagnostics: tryFilenameCall(ls.getSemanticDiagnostics),\n      getCompilerOptionsDiagnostics: () => ls.getCompilerOptionsDiagnostics(),\n      getSyntacticClassifications: tryFilenameOneCall(ls.getSemanticClassifications),\n      getSemanticClassifications: tryFilenameOneCall(ls.getSemanticClassifications),\n      getEncodedSyntacticClassifications: tryFilenameOneCall(ls.getEncodedSyntacticClassifications),\n      getEncodedSemanticClassifications: tryFilenameOneCall(ls.getEncodedSemanticClassifications),\n      getCompletionsAtPosition: tryFilenameOneCall(ls.getCompletionsAtPosition),\n      getCompletionEntryDetails: tryFilenameTwoCall(ls.getCompletionEntryDetails),\n      getCompletionEntrySymbol: tryFilenameTwoCall(ls.getCompletionEntrySymbol),\n      getQuickInfoAtPosition: tryFilenameOneCall(ls.getQuickInfoAtPosition),\n      getNameOrDottedNameSpan: tryFilenameTwoCall(ls.getNameOrDottedNameSpan),\n      getBreakpointStatementAtPosition: tryFilenameOneCall(ls.getBreakpointStatementAtPosition),\n      getSignatureHelpItems: tryFilenameOneCall(ls.getSignatureHelpItems),\n      getRenameInfo: tryFilenameOneCall(ls.getRenameInfo),\n      findRenameLocations: tryFilenameThreeCall(ls.findRenameLocations),\n      getDefinitionAtPosition: tryFilenameOneCall(ls.getDefinitionAtPosition),\n      getTypeDefinitionAtPosition: tryFilenameOneCall(ls.getTypeDefinitionAtPosition),\n      getImplementationAtPosition: tryFilenameOneCall(ls.getImplementationAtPosition),\n      getReferencesAtPosition: tryFilenameOneCall(ls.getReferencesAtPosition),\n      findReferences: tryFilenameOneCall(ls.findReferences),\n      getDocumentHighlights: tryFilenameTwoCall(ls.getDocumentHighlights),\n      /** @deprecated */\n      getOccurrencesAtPosition: tryFilenameOneCall(ls.getOccurrencesAtPosition),\n      getNavigateToItems:\n          (searchValue, maxResultCount, fileName, excludeDtsFiles) => tryCall(\n              fileName,\n              () => ls.getNavigateToItems(searchValue, maxResultCount, fileName, excludeDtsFiles)),\n      getNavigationBarItems: tryFilenameCall(ls.getNavigationBarItems),\n      getNavigationTree: tryFilenameCall(ls.getNavigationTree),\n      getOutliningSpans: tryFilenameCall(ls.getOutliningSpans),\n      getTodoComments: tryFilenameOneCall(ls.getTodoComments),\n      getBraceMatchingAtPosition: tryFilenameOneCall(ls.getBraceMatchingAtPosition),\n      getIndentationAtPosition: tryFilenameTwoCall(ls.getIndentationAtPosition),\n      getFormattingEditsForRange: tryFilenameThreeCall(ls.getFormattingEditsForRange),\n      getFormattingEditsForDocument: tryFilenameOneCall(ls.getFormattingEditsForDocument),\n      getFormattingEditsAfterKeystroke: tryFilenameThreeCall(ls.getFormattingEditsAfterKeystroke),\n      getDocCommentTemplateAtPosition: tryFilenameOneCall(ls.getDocCommentTemplateAtPosition),\n      isValidBraceCompletionAtPosition: tryFilenameTwoCall(ls.isValidBraceCompletionAtPosition),\n      getCodeFixesAtPosition: tryFilenameFourCall(ls.getCodeFixesAtPosition),\n      getEmitOutput: tryFilenameCall(ls.getEmitOutput),\n      getProgram: () => ls.getProgram(),\n      dispose: () => ls.dispose()\n    };\n  }\n\n  oldLS = typescriptOnly(oldLS);\n\n  for (const k in oldLS) {\n    (<any>proxy)[k] = function() { return (oldLS as any)[k].apply(oldLS, arguments); };\n  }\n\n  function completionToEntry(c: Completion): ts.CompletionEntry {\n    return {kind: c.kind, name: c.name, sortText: c.sort, kindModifiers: ''};\n  }\n\n  function diagnosticToDiagnostic(d: Diagnostic, file: ts.SourceFile): ts.Diagnostic {\n    const result = {\n      file,\n      start: d.span.start,\n      length: d.span.end - d.span.start,\n      messageText: d.message,\n      category: ts.DiagnosticCategory.Error,\n      code: 0,\n      source: 'ng'\n    };\n    return result;\n  }\n\n  function tryOperation<T>(attempting: string, callback: () => T): T|null {\n    try {\n      return callback();\n    } catch (e) {\n      info.project.projectService.logger.info(`Failed to ${attempting}: ${e.toString()}`);\n      info.project.projectService.logger.info(`Stack trace: ${e.stack}`);\n      return null;\n    }\n  }\n\n  const serviceHost = new TypeScriptServiceHost(info.languageServiceHost, info.languageService);\n  const ls = createLanguageService(serviceHost as any);\n  serviceHost.setSite(ls);\n  projectHostMap.set(info.project, serviceHost);\n\n  proxy.getCompletionsAtPosition = function(fileName: string, position: number) {\n    let base = oldLS.getCompletionsAtPosition(fileName, position) || {\n      isGlobalCompletion: false,\n      isMemberCompletion: false,\n      isNewIdentifierLocation: false,\n      entries: []\n    };\n    tryOperation('get completions', () => {\n      const results = ls.getCompletionsAt(fileName, position);\n      if (results && results.length) {\n        if (base === undefined) {\n          base = {\n            isGlobalCompletion: false,\n            isMemberCompletion: false,\n            isNewIdentifierLocation: false,\n            entries: []\n          };\n        }\n        for (const entry of results) {\n          base.entries.push(completionToEntry(entry));\n        }\n      }\n    });\n    return base;\n  };\n\n  proxy.getQuickInfoAtPosition = function(fileName: string, position: number): ts.QuickInfo {\n    let base = oldLS.getQuickInfoAtPosition(fileName, position);\n    // TODO(vicb): the tags property has been removed in TS 2.2\n    tryOperation('get quick info', () => {\n      const ours = ls.getHoverAt(fileName, position);\n      if (ours) {\n        const displayParts: ts.SymbolDisplayPart[] = [];\n        for (const part of ours.text) {\n          displayParts.push({kind: part.language || 'angular', text: part.text});\n        }\n        const tags = base && (<any>base).tags;\n        base = <any>{\n          displayParts,\n          documentation: [],\n          kind: 'angular',\n          kindModifiers: 'what does this do?',\n          textSpan: {start: ours.span.start, length: ours.span.end - ours.span.start},\n        };\n        if (tags) {\n          (<any>base).tags = tags;\n        }\n      }\n    });\n\n    return base;\n  };\n\n  proxy.getSemanticDiagnostics = function(fileName: string) {\n    let result = oldLS.getSemanticDiagnostics(fileName);\n    const base = result || [];\n    tryOperation('get diagnostics', () => {\n      info.project.projectService.logger.info(`Computing Angular semantic diagnostics...`);\n      const ours = ls.getDiagnostics(fileName);\n      if (ours && ours.length) {\n        const file = oldLS.getProgram().getSourceFile(fileName);\n        base.push.apply(base, ours.map(d => diagnosticToDiagnostic(d, file)));\n      }\n    });\n\n    return base;\n  };\n\n  proxy.getDefinitionAtPosition = function(\n                                      fileName: string, position: number): ts.DefinitionInfo[] {\n    let base = oldLS.getDefinitionAtPosition(fileName, position);\n    if (base && base.length) {\n      return base;\n    }\n\n    return tryOperation('get definition', () => {\n             const ours = ls.getDefinitionAt(fileName, position);\n             if (ours && ours.length) {\n               base = base || [];\n               for (const loc of ours) {\n                 base.push({\n                   fileName: loc.fileName,\n                   textSpan: {start: loc.span.start, length: loc.span.end - loc.span.start},\n                   name: '',\n                   kind: 'definition',\n                   containerName: loc.fileName,\n                   containerKind: 'file'\n                 });\n               }\n             }\n             return base;\n           }) || [];\n  };\n\n  return proxy;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AotSummaryResolver, CompileMetadataResolver, CompilerConfig, DEFAULT_INTERPOLATION_CONFIG, DirectiveNormalizer, DirectiveResolver, DomElementSchemaRegistry, HtmlParser, InterpolationConfig, JitSummaryResolver, NgAnalyzedModules, NgModuleResolver, ParseTreeResult, PipeResolver, ResourceLoader, StaticReflector, StaticSymbol, StaticSymbolCache, StaticSymbolResolver, SummaryResolver, analyzeNgModules, createOfflineCompileUrlResolver, extractProgramSymbols} from '@angular/compiler';\nimport {AngularCompilerOptions, getClassMembersFromDeclaration, getPipesTable, getSymbolQuery} from '@angular/compiler-cli';\nimport {ViewEncapsulation, ɵConsole as Console} from '@angular/core';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {createLanguageService} from './language_service';\nimport {ReflectorHost} from './reflector_host';\nimport {BuiltinType, Declaration, DeclarationError, DeclarationKind, Declarations, Definition, LanguageService, LanguageServiceHost, PipeInfo, Pipes, Signature, Span, Symbol, SymbolDeclaration, SymbolQuery, SymbolTable, TemplateSource, TemplateSources} from './types';\nimport {isTypescriptVersion} from './utils';\n\n\n/**\n * Create a `LanguageServiceHost`\n */\nexport function createLanguageServiceFromTypescript(\n    host: ts.LanguageServiceHost, service: ts.LanguageService): LanguageService {\n  const ngHost = new TypeScriptServiceHost(host, service);\n  const ngServer = createLanguageService(ngHost);\n  ngHost.setSite(ngServer);\n  return ngServer;\n}\n\n/**\n * The language service never needs the normalized versions of the metadata. To avoid parsing\n * the content and resolving references, return an empty file. This also allows normalizing\n * template that are syntatically incorrect which is required to provide completions in\n * syntactically incorrect templates.\n */\nexport class DummyHtmlParser extends HtmlParser {\n  parse(\n      source: string, url: string, parseExpansionForms: boolean = false,\n      interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): ParseTreeResult {\n    return new ParseTreeResult([], []);\n  }\n}\n\n/**\n * Avoid loading resources in the language servcie by using a dummy loader.\n */\nexport class DummyResourceLoader extends ResourceLoader {\n  get(url: string): Promise<string> { return Promise.resolve(''); }\n}\n\n/**\n * An implemntation of a `LanguageServiceHost` for a TypeScript project.\n *\n * The `TypeScriptServiceHost` implements the Angular `LanguageServiceHost` using\n * the TypeScript language services.\n *\n * @experimental\n */\nexport class TypeScriptServiceHost implements LanguageServiceHost {\n  private _resolver: CompileMetadataResolver|null;\n  private _staticSymbolCache = new StaticSymbolCache();\n  private _summaryResolver: AotSummaryResolver;\n  private _staticSymbolResolver: StaticSymbolResolver;\n  private _reflector: StaticReflector|null;\n  private _reflectorHost: ReflectorHost;\n  private _checker: ts.TypeChecker|null;\n  private _typeCache: Symbol[] = [];\n  private context: string|undefined;\n  private lastProgram: ts.Program|undefined;\n  private modulesOutOfDate: boolean = true;\n  private analyzedModules: NgAnalyzedModules|null;\n  private service: LanguageService;\n  private fileToComponent: Map<string, StaticSymbol>|null;\n  private templateReferences: string[]|null;\n  private collectedErrors: Map<string, any[]>|null;\n  private fileVersions = new Map<string, string>();\n\n  constructor(private host: ts.LanguageServiceHost, private tsService: ts.LanguageService) {}\n\n  setSite(service: LanguageService) { this.service = service; }\n\n  /**\n   * Angular LanguageServiceHost implementation\n   */\n  get resolver(): CompileMetadataResolver {\n    this.validate();\n    let result = this._resolver;\n    if (!result) {\n      const moduleResolver = new NgModuleResolver(this.reflector);\n      const directiveResolver = new DirectiveResolver(this.reflector);\n      const pipeResolver = new PipeResolver(this.reflector);\n      const elementSchemaRegistry = new DomElementSchemaRegistry();\n      const resourceLoader = new DummyResourceLoader();\n      const urlResolver = createOfflineCompileUrlResolver();\n      const htmlParser = new DummyHtmlParser();\n      // This tracks the CompileConfig in codegen.ts. Currently these options\n      // are hard-coded.\n      const config =\n          new CompilerConfig({defaultEncapsulation: ViewEncapsulation.Emulated, useJit: false});\n      const directiveNormalizer =\n          new DirectiveNormalizer(resourceLoader, urlResolver, htmlParser, config);\n\n      result = this._resolver = new CompileMetadataResolver(\n          config, moduleResolver, directiveResolver, pipeResolver, new JitSummaryResolver(),\n          elementSchemaRegistry, directiveNormalizer, new Console(), this._staticSymbolCache,\n          this.reflector, (error, type) => this.collectError(error, type && type.filePath));\n    }\n    return result;\n  }\n\n  getTemplateReferences(): string[] {\n    this.ensureTemplateMap();\n    return this.templateReferences || [];\n  }\n\n  getTemplateAt(fileName: string, position: number): TemplateSource|undefined {\n    let sourceFile = this.getSourceFile(fileName);\n    if (sourceFile) {\n      this.context = sourceFile.fileName;\n      let node = this.findNode(sourceFile, position);\n      if (node) {\n        return this.getSourceFromNode(\n            fileName, this.host.getScriptVersion(sourceFile.fileName), node);\n      }\n    } else {\n      this.ensureTemplateMap();\n      // TODO: Cannocalize the file?\n      const componentType = this.fileToComponent !.get(fileName);\n      if (componentType) {\n        return this.getSourceFromType(\n            fileName, this.host.getScriptVersion(fileName), componentType);\n      }\n    }\n    return undefined;\n  }\n\n  getAnalyzedModules(): NgAnalyzedModules {\n    this.validate();\n    return this.ensureAnalyzedModules();\n  }\n\n  private ensureAnalyzedModules(): NgAnalyzedModules {\n    let analyzedModules = this.analyzedModules;\n    if (!analyzedModules) {\n      const analyzeHost = {isSourceFile(filePath: string) { return true; }};\n      const programSymbols = extractProgramSymbols(\n          this.staticSymbolResolver, this.program.getSourceFiles().map(sf => sf.fileName),\n          analyzeHost);\n\n      analyzedModules = this.analyzedModules =\n          analyzeNgModules(programSymbols, analyzeHost, this.resolver);\n    }\n    return analyzedModules;\n  }\n\n  getTemplates(fileName: string): TemplateSources {\n    this.ensureTemplateMap();\n    const componentType = this.fileToComponent !.get(fileName);\n    if (componentType) {\n      const templateSource = this.getTemplateAt(fileName, 0);\n      if (templateSource) {\n        return [templateSource];\n      }\n    } else {\n      let version = this.host.getScriptVersion(fileName);\n      let result: TemplateSource[] = [];\n\n      // Find each template string in the file\n      let visit = (child: ts.Node) => {\n        let templateSource = this.getSourceFromNode(fileName, version, child);\n        if (templateSource) {\n          result.push(templateSource);\n        } else {\n          ts.forEachChild(child, visit);\n        }\n      };\n\n      let sourceFile = this.getSourceFile(fileName);\n      if (sourceFile) {\n        this.context = (sourceFile as any).path || sourceFile.fileName;\n        ts.forEachChild(sourceFile, visit);\n      }\n      return result.length ? result : undefined;\n    }\n  }\n\n  getDeclarations(fileName: string): Declarations {\n    const result: Declarations = [];\n    const sourceFile = this.getSourceFile(fileName);\n    if (sourceFile) {\n      let visit = (child: ts.Node) => {\n        let declaration = this.getDeclarationFromNode(sourceFile, child);\n        if (declaration) {\n          result.push(declaration);\n        } else {\n          ts.forEachChild(child, visit);\n        }\n      };\n      ts.forEachChild(sourceFile, visit);\n    }\n    return result;\n  }\n\n  getSourceFile(fileName: string): ts.SourceFile {\n    return this.tsService.getProgram().getSourceFile(fileName);\n  }\n\n  updateAnalyzedModules() {\n    this.validate();\n    if (this.modulesOutOfDate) {\n      this.analyzedModules = null;\n      this._reflector = null;\n      this.templateReferences = null;\n      this.fileToComponent = null;\n      this.ensureAnalyzedModules();\n      this.modulesOutOfDate = false;\n    }\n  }\n\n  private get program() { return this.tsService.getProgram(); }\n\n  private get checker() {\n    let checker = this._checker;\n    if (!checker) {\n      checker = this._checker = this.program.getTypeChecker();\n    }\n    return checker;\n  }\n\n  private validate() {\n    const program = this.program;\n    if (this._staticSymbolResolver && this.lastProgram != program) {\n      // Invalidate file that have changed in the static symbol resolver\n      const invalidateFile = (fileName: string) =>\n          this._staticSymbolResolver.invalidateFile(fileName);\n      this.clearCaches();\n      const seen = new Set<string>();\n      for (let sourceFile of this.program.getSourceFiles()) {\n        const fileName = sourceFile.fileName;\n        seen.add(fileName);\n        const version = this.host.getScriptVersion(fileName);\n        const lastVersion = this.fileVersions.get(fileName);\n        if (version != lastVersion) {\n          this.fileVersions.set(fileName, version);\n          invalidateFile(fileName);\n        }\n      }\n\n      // Remove file versions that are no longer in the file and invalidate them.\n      const missing = Array.from(this.fileVersions.keys()).filter(f => !seen.has(f));\n      missing.forEach(f => this.fileVersions.delete(f));\n      missing.forEach(invalidateFile);\n\n      this.lastProgram = program;\n    }\n  }\n\n  private clearCaches() {\n    this._checker = null;\n    this._typeCache = [];\n    this._resolver = null;\n    this.collectedErrors = null;\n    this.modulesOutOfDate = true;\n  }\n\n  private ensureTemplateMap() {\n    if (!this.fileToComponent || !this.templateReferences) {\n      const fileToComponent = new Map<string, StaticSymbol>();\n      const templateReference: string[] = [];\n      const ngModuleSummary = this.getAnalyzedModules();\n      const urlResolver = createOfflineCompileUrlResolver();\n      for (const module of ngModuleSummary.ngModules) {\n        for (const directive of module.declaredDirectives) {\n          const {metadata} = this.resolver.getNonNormalizedDirectiveMetadata(directive.reference) !;\n          if (metadata.isComponent && metadata.template && metadata.template.templateUrl) {\n            const templateName = urlResolver.resolve(\n                this.reflector.componentModuleUrl(directive.reference),\n                metadata.template.templateUrl);\n            fileToComponent.set(templateName, directive.reference);\n            templateReference.push(templateName);\n          }\n        }\n      }\n      this.fileToComponent = fileToComponent;\n      this.templateReferences = templateReference;\n    }\n  }\n\n  private getSourceFromDeclaration(\n      fileName: string, version: string, source: string, span: Span, type: StaticSymbol,\n      declaration: ts.ClassDeclaration, node: ts.Node, sourceFile: ts.SourceFile): TemplateSource\n      |undefined {\n    let queryCache: SymbolQuery|undefined = undefined;\n    const t = this;\n    if (declaration) {\n      return {\n        version,\n        source,\n        span,\n        type,\n        get members() {\n          return getClassMembersFromDeclaration(t.program, t.checker, sourceFile, declaration);\n        },\n        get query() {\n          if (!queryCache) {\n            const pipes = t.service.getPipesAt(fileName, node.getStart());\n            queryCache = getSymbolQuery(\n                t.program, t.checker, sourceFile,\n                () => getPipesTable(sourceFile, t.program, t.checker, pipes));\n          }\n          return queryCache;\n        }\n      };\n    }\n  }\n\n  private getSourceFromNode(fileName: string, version: string, node: ts.Node): TemplateSource\n      |undefined {\n    let result: TemplateSource|undefined = undefined;\n    const t = this;\n    switch (node.kind) {\n      case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n      case ts.SyntaxKind.StringLiteral:\n        let [declaration, decorator] = this.getTemplateClassDeclFromNode(node);\n        if (declaration && declaration.name) {\n          const sourceFile = this.getSourceFile(fileName);\n          return this.getSourceFromDeclaration(\n              fileName, version, this.stringOf(node) || '', shrink(spanOf(node)),\n              this.reflector.getStaticSymbol(sourceFile.fileName, declaration.name.text),\n              declaration, node, sourceFile);\n        }\n        break;\n    }\n    return result;\n  }\n\n  private getSourceFromType(fileName: string, version: string, type: StaticSymbol): TemplateSource\n      |undefined {\n    let result: TemplateSource|undefined = undefined;\n    const declaration = this.getTemplateClassFromStaticSymbol(type);\n    if (declaration) {\n      const snapshot = this.host.getScriptSnapshot(fileName);\n      if (snapshot) {\n        const source = snapshot.getText(0, snapshot.getLength());\n        result = this.getSourceFromDeclaration(\n            fileName, version, source, {start: 0, end: source.length}, type, declaration,\n            declaration, declaration.getSourceFile());\n      }\n    }\n    return result;\n  }\n\n  private get reflectorHost(): ReflectorHost {\n    let result = this._reflectorHost;\n    if (!result) {\n      if (!this.context) {\n        // Make up a context by finding the first script and using that as the base dir.\n        this.context = this.host.getScriptFileNames()[0];\n      }\n\n      // Use the file context's directory as the base directory.\n      // The host's getCurrentDirectory() is not reliable as it is always \"\" in\n      // tsserver. We don't need the exact base directory, just one that contains\n      // a source file.\n      const source = this.tsService.getProgram().getSourceFile(this.context);\n      if (!source) {\n        throw new Error('Internal error: no context could be determined');\n      }\n\n      const tsConfigPath = findTsConfig(source.fileName);\n      const basePath = path.dirname(tsConfigPath || this.context);\n      const options: AngularCompilerOptions = {basePath, genDir: basePath};\n      const compilerOptions = this.host.getCompilationSettings();\n      if (compilerOptions && compilerOptions.baseUrl) {\n        options.baseUrl = compilerOptions.baseUrl;\n      }\n      result = this._reflectorHost =\n          new ReflectorHost(() => this.tsService.getProgram(), this.host, options);\n    }\n    return result;\n  }\n\n  private collectError(error: any, filePath: string|null) {\n    if (filePath) {\n      let errorMap = this.collectedErrors;\n      if (!errorMap || !this.collectedErrors) {\n        errorMap = this.collectedErrors = new Map();\n      }\n      let errors = errorMap.get(filePath);\n      if (!errors) {\n        errors = [];\n        this.collectedErrors.set(filePath, errors);\n      }\n      errors.push(error);\n    }\n  }\n\n  private get staticSymbolResolver(): StaticSymbolResolver {\n    let result = this._staticSymbolResolver;\n    if (!result) {\n      this._summaryResolver = new AotSummaryResolver(\n          {\n            loadSummary(filePath: string) { return null; },\n            isSourceFile(sourceFilePath: string) { return true; },\n            getOutputFileName(sourceFilePath: string) { return sourceFilePath; }\n          },\n          this._staticSymbolCache);\n      result = this._staticSymbolResolver = new StaticSymbolResolver(\n          this.reflectorHost as any, this._staticSymbolCache, this._summaryResolver,\n          (e, filePath) => this.collectError(e, filePath !));\n    }\n    return result;\n  }\n\n  private get reflector(): StaticReflector {\n    let result = this._reflector;\n    if (!result) {\n      const ssr = this.staticSymbolResolver;\n      result = this._reflector = new StaticReflector(\n          this._summaryResolver, ssr, [], [], (e, filePath) => this.collectError(e, filePath !));\n    }\n    return result;\n  }\n\n  private getTemplateClassFromStaticSymbol(type: StaticSymbol): ts.ClassDeclaration|undefined {\n    const source = this.getSourceFile(type.filePath);\n    if (source) {\n      const declarationNode = ts.forEachChild(source, child => {\n        if (child.kind === ts.SyntaxKind.ClassDeclaration) {\n          const classDeclaration = child as ts.ClassDeclaration;\n          if (classDeclaration.name != null && classDeclaration.name.text === type.name) {\n            return classDeclaration;\n          }\n        }\n      });\n      return declarationNode as ts.ClassDeclaration;\n    }\n\n    return undefined;\n  }\n\n  private static missingTemplate: [ts.ClassDeclaration | undefined, ts.Expression|undefined] =\n      [undefined, undefined];\n\n  /**\n   * Given a template string node, see if it is an Angular template string, and if so return the\n   * containing class.\n   */\n  private getTemplateClassDeclFromNode(currentToken: ts.Node):\n      [ts.ClassDeclaration | undefined, ts.Expression|undefined] {\n    // Verify we are in a 'template' property assignment, in an object literal, which is an call\n    // arg, in a decorator\n    let parentNode = currentToken.parent;  // PropertyAssignment\n    if (!parentNode) {\n      return TypeScriptServiceHost.missingTemplate;\n    }\n    if (parentNode.kind !== ts.SyntaxKind.PropertyAssignment) {\n      return TypeScriptServiceHost.missingTemplate;\n    } else {\n      // TODO: Is this different for a literal, i.e. a quoted property name like \"template\"?\n      if ((parentNode as any).name.text !== 'template') {\n        return TypeScriptServiceHost.missingTemplate;\n      }\n    }\n    parentNode = parentNode.parent;  // ObjectLiteralExpression\n    if (!parentNode || parentNode.kind !== ts.SyntaxKind.ObjectLiteralExpression) {\n      return TypeScriptServiceHost.missingTemplate;\n    }\n\n    parentNode = parentNode.parent;  // CallExpression\n    if (!parentNode || parentNode.kind !== ts.SyntaxKind.CallExpression) {\n      return TypeScriptServiceHost.missingTemplate;\n    }\n    const callTarget = (<ts.CallExpression>parentNode).expression;\n\n    let decorator = parentNode.parent;  // Decorator\n    if (!decorator || decorator.kind !== ts.SyntaxKind.Decorator) {\n      return TypeScriptServiceHost.missingTemplate;\n    }\n\n    let declaration = <ts.ClassDeclaration>decorator.parent;  // ClassDeclaration\n    if (!declaration || declaration.kind !== ts.SyntaxKind.ClassDeclaration) {\n      return TypeScriptServiceHost.missingTemplate;\n    }\n    return [declaration, callTarget];\n  }\n\n  private getCollectedErrors(defaultSpan: Span, sourceFile: ts.SourceFile): DeclarationError[] {\n    const errors = (this.collectedErrors && this.collectedErrors.get(sourceFile.fileName));\n    return (errors && errors.map((e: any) => {\n             return {message: e.message, span: spanAt(sourceFile, e.line, e.column) || defaultSpan};\n           })) ||\n        [];\n  }\n\n  private getDeclarationFromNode(sourceFile: ts.SourceFile, node: ts.Node): Declaration|undefined {\n    if (node.kind == ts.SyntaxKind.ClassDeclaration && node.decorators &&\n        (node as ts.ClassDeclaration).name) {\n      for (const decorator of node.decorators) {\n        if (decorator.expression && decorator.expression.kind == ts.SyntaxKind.CallExpression) {\n          const classDeclaration = node as ts.ClassDeclaration;\n          if (classDeclaration.name) {\n            const call = decorator.expression as ts.CallExpression;\n            const target = call.expression;\n            const type = this.checker.getTypeAtLocation(target);\n            if (type) {\n              const staticSymbol =\n                  this.reflector.getStaticSymbol(sourceFile.fileName, classDeclaration.name.text);\n              try {\n                if (this.resolver.isDirective(staticSymbol as any)) {\n                  const {metadata} =\n                      this.resolver.getNonNormalizedDirectiveMetadata(staticSymbol as any) !;\n                  const declarationSpan = spanOf(target);\n                  return {\n                    type: staticSymbol,\n                    declarationSpan,\n                    metadata,\n                    errors: this.getCollectedErrors(declarationSpan, sourceFile)\n                  };\n                }\n              } catch (e) {\n                if (e.message) {\n                  this.collectError(e, sourceFile.fileName);\n                  const declarationSpan = spanOf(target);\n                  return {\n                    type: staticSymbol,\n                    declarationSpan,\n                    errors: this.getCollectedErrors(declarationSpan, sourceFile)\n                  };\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private stringOf(node: ts.Node): string|undefined {\n    switch (node.kind) {\n      case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n        return (<ts.LiteralExpression>node).text;\n      case ts.SyntaxKind.StringLiteral:\n        return (<ts.StringLiteral>node).text;\n    }\n  }\n\n  private findNode(sourceFile: ts.SourceFile, position: number): ts.Node|undefined {\n    function find(node: ts.Node): ts.Node|undefined {\n      if (position >= node.getStart() && position < node.getEnd()) {\n        return ts.forEachChild(node, find) || node;\n      }\n    }\n\n    return find(sourceFile);\n  }\n}\n\n\nfunction findTsConfig(fileName: string): string|undefined {\n  let dir = path.dirname(fileName);\n  while (fs.existsSync(dir)) {\n    const candidate = path.join(dir, 'tsconfig.json');\n    if (fs.existsSync(candidate)) return candidate;\n    const parentDir = path.dirname(dir);\n    if (parentDir === dir) break;\n    dir = parentDir;\n  }\n}\n\nfunction spanOf(node: ts.Node): Span {\n  return {start: node.getStart(), end: node.getEnd()};\n}\n\nfunction shrink(span: Span, offset?: number) {\n  if (offset == null) offset = 1;\n  return {start: span.start + offset, end: span.end - offset};\n}\n\nfunction spanAt(sourceFile: ts.SourceFile, line: number, column: number): Span|undefined {\n  if (line != null && column != null) {\n    const position = ts.getPositionOfLineAndCharacter(sourceFile, line, column);\n    const findChild = function findChild(node: ts.Node): ts.Node | undefined {\n      if (node.kind > ts.SyntaxKind.LastToken && node.pos <= position && node.end > position) {\n        const betterNode = ts.forEachChild(node, findChild);\n        return betterNode || node;\n      }\n    };\n\n    const node = ts.forEachChild(sourceFile, findChild);\n    if (node) {\n      return {start: node.getStart(), end: node.getEnd()};\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AngularCompilerOptions, AotCompilerHost, CompilerHost, ModuleResolutionHostAdapter} from '@angular/compiler-cli';\nimport * as ts from 'typescript';\n\nclass ReflectorModuleModuleResolutionHost implements ts.ModuleResolutionHost {\n  constructor(private host: ts.LanguageServiceHost) {\n    if (host.directoryExists)\n      this.directoryExists = directoryName => this.host.directoryExists !(directoryName);\n  }\n\n  fileExists(fileName: string): boolean { return !!this.host.getScriptSnapshot(fileName); }\n\n  readFile(fileName: string): string {\n    let snapshot = this.host.getScriptSnapshot(fileName);\n    if (snapshot) {\n      return snapshot.getText(0, snapshot.getLength());\n    }\n\n    // Typescript readFile() declaration should be `readFile(fileName: string): string | undefined\n    return undefined !;\n  }\n\n  directoryExists: (directoryName: string) => boolean;\n}\n\n// This reflector host's purpose is to first set verboseInvalidExpressions to true so the\n// reflector will collect errors instead of throwing, and second to all deferring the creation\n// of the program until it is actually needed.\nexport class ReflectorHost extends CompilerHost {\n  constructor(\n      private getProgram: () => ts.Program, serviceHost: ts.LanguageServiceHost,\n      options: AngularCompilerOptions) {\n    super(\n        // The ancestor value for program is overridden below so passing null here is safe.\n        /* program */ null !, options,\n        new ModuleResolutionHostAdapter(new ReflectorModuleModuleResolutionHost(serviceHost)),\n        {verboseInvalidExpression: true});\n  }\n\n  protected get program() { return this.getProgram(); }\n  protected set program(value: ts.Program) {\n    // Discard the result set by ancestor constructor\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileMetadataResolver, CompileNgModuleMetadata, CompilePipeSummary, CompilerConfig, DomElementSchemaRegistry, HtmlParser, I18NHtmlParser, Lexer, NgAnalyzedModules, Parser, TemplateParser} from '@angular/compiler';\n\nimport {AstResult, TemplateInfo} from './common';\nimport {getTemplateCompletions} from './completions';\nimport {getDefinition} from './definitions';\nimport {getDeclarationDiagnostics, getTemplateDiagnostics} from './diagnostics';\nimport {getHover} from './hover';\nimport {Completions, Definition, Diagnostic, DiagnosticKind, Diagnostics, Hover, LanguageService, LanguageServiceHost, Pipes, Span, TemplateSource} from './types';\n\n\n/**\n * Create an instance of an Angular `LanguageService`.\n *\n * @experimental\n */\nexport function createLanguageService(host: LanguageServiceHost): LanguageService {\n  return new LanguageServiceImpl(host);\n}\n\nclass LanguageServiceImpl implements LanguageService {\n  constructor(private host: LanguageServiceHost) {}\n\n  private get metadataResolver(): CompileMetadataResolver { return this.host.resolver; }\n\n  getTemplateReferences(): string[] { return this.host.getTemplateReferences(); }\n\n  getDiagnostics(fileName: string): Diagnostics|undefined {\n    let results: Diagnostics = [];\n    let templates = this.host.getTemplates(fileName);\n    if (templates && templates.length) {\n      results.push(...getTemplateDiagnostics(fileName, this, templates));\n    }\n\n    let declarations = this.host.getDeclarations(fileName);\n    if (declarations && declarations.length) {\n      const summary = this.host.getAnalyzedModules();\n      results.push(...getDeclarationDiagnostics(declarations, summary));\n    }\n\n    return uniqueBySpan(results);\n  }\n\n  getPipesAt(fileName: string, position: number): CompilePipeSummary[] {\n    let templateInfo = this.getTemplateAstAtPosition(fileName, position);\n    if (templateInfo) {\n      return templateInfo.pipes;\n    }\n    return [];\n  }\n\n  getCompletionsAt(fileName: string, position: number): Completions {\n    let templateInfo = this.getTemplateAstAtPosition(fileName, position);\n    if (templateInfo) {\n      return getTemplateCompletions(templateInfo);\n    }\n  }\n\n  getDefinitionAt(fileName: string, position: number): Definition {\n    let templateInfo = this.getTemplateAstAtPosition(fileName, position);\n    if (templateInfo) {\n      return getDefinition(templateInfo);\n    }\n  }\n\n  getHoverAt(fileName: string, position: number): Hover|undefined {\n    let templateInfo = this.getTemplateAstAtPosition(fileName, position);\n    if (templateInfo) {\n      return getHover(templateInfo);\n    }\n  }\n\n  private getTemplateAstAtPosition(fileName: string, position: number): TemplateInfo|undefined {\n    let template = this.host.getTemplateAt(fileName, position);\n    if (template) {\n      let astResult = this.getTemplateAst(template, fileName);\n      if (astResult && astResult.htmlAst && astResult.templateAst && astResult.directive &&\n          astResult.directives && astResult.pipes && astResult.expressionParser)\n        return {\n          position,\n          fileName,\n          template,\n          htmlAst: astResult.htmlAst,\n          directive: astResult.directive,\n          directives: astResult.directives,\n          pipes: astResult.pipes,\n          templateAst: astResult.templateAst,\n          expressionParser: astResult.expressionParser\n        };\n    }\n    return undefined;\n  }\n\n  getTemplateAst(template: TemplateSource, contextFile: string): AstResult {\n    let result: AstResult|undefined = undefined;\n    try {\n      const resolvedMetadata =\n          this.metadataResolver.getNonNormalizedDirectiveMetadata(template.type as any);\n      const metadata = resolvedMetadata && resolvedMetadata.metadata;\n      if (metadata) {\n        const rawHtmlParser = new HtmlParser();\n        const htmlParser = new I18NHtmlParser(rawHtmlParser);\n        const expressionParser = new Parser(new Lexer());\n        const config = new CompilerConfig();\n        const parser = new TemplateParser(\n            config, this.host.resolver.getReflector(), expressionParser,\n            new DomElementSchemaRegistry(), htmlParser, null !, []);\n        const htmlResult = htmlParser.parse(template.source, '', true);\n        const analyzedModules = this.host.getAnalyzedModules();\n        let errors: Diagnostic[]|undefined = undefined;\n        let ngModule = analyzedModules.ngModuleByPipeOrDirective.get(template.type);\n        if (!ngModule) {\n          // Reported by the the declaration diagnostics.\n          ngModule = findSuitableDefaultModule(analyzedModules);\n        }\n        if (ngModule) {\n          const resolvedDirectives = ngModule.transitiveModule.directives.map(\n              d => this.host.resolver.getNonNormalizedDirectiveMetadata(d.reference));\n          const directives = removeMissing(resolvedDirectives).map(d => d.metadata.toSummary());\n          const pipes = ngModule.transitiveModule.pipes.map(\n              p => this.host.resolver.getOrLoadPipeMetadata(p.reference).toSummary());\n          const schemas = ngModule.schemas;\n          const parseResult = parser.tryParseHtml(htmlResult, metadata, directives, pipes, schemas);\n          result = {\n            htmlAst: htmlResult.rootNodes,\n            templateAst: parseResult.templateAst,\n            directive: metadata, directives, pipes,\n            parseErrors: parseResult.errors, expressionParser, errors\n          };\n        }\n      }\n    } catch (e) {\n      let span = template.span;\n      if (e.fileName == contextFile) {\n        span = template.query.getSpanAt(e.line, e.column) || span;\n      }\n      result = {errors: [{kind: DiagnosticKind.Error, message: e.message, span}]};\n    }\n    return result || {};\n  }\n}\n\nfunction removeMissing<T>(values: (T | null | undefined)[]): T[] {\n  return values.filter(e => !!e) as T[];\n}\n\nfunction uniqueBySpan < T extends {\n  span: Span;\n}\n> (elements: T[] | undefined): T[]|undefined {\n  if (elements) {\n    const result: T[] = [];\n    const map = new Map<number, Set<number>>();\n    for (const element of elements) {\n      let span = element.span;\n      let set = map.get(span.start);\n      if (!set) {\n        set = new Set();\n        map.set(span.start, set);\n      }\n      if (!set.has(span.end)) {\n        set.add(span.end);\n        result.push(element);\n      }\n    }\n    return result;\n  }\n}\n\nfunction findSuitableDefaultModule(modules: NgAnalyzedModules): CompileNgModuleMetadata|undefined {\n  let result: CompileNgModuleMetadata|undefined = undefined;\n  let resultSize = 0;\n  for (const module of modules.ngModules) {\n    const moduleSize = module.transitiveModule.directives.length;\n    if (moduleSize > resultSize) {\n      result = module;\n      resultSize = moduleSize;\n    }\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplateInfo} from './common';\nimport {locateSymbol} from './locate_symbol';\nimport {Hover, HoverTextSection, Symbol} from './types';\n\nexport function getHover(info: TemplateInfo): Hover|undefined {\n  const result = locateSymbol(info);\n  if (result) {\n    return {text: hoverTextOf(result.symbol), span: result.span};\n  }\n}\n\nfunction hoverTextOf(symbol: Symbol): HoverTextSection[] {\n  const result: HoverTextSection[] =\n      [{text: symbol.kind}, {text: ' '}, {text: symbol.name, language: symbol.language}];\n  const container = symbol.container;\n  if (container) {\n    result.push({text: ' of '}, {text: container.name, language: container.language});\n  }\n  return result;\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgAnalyzedModules, StaticSymbol} from '@angular/compiler';\nimport {DiagnosticTemplateInfo, getTemplateExpressionDiagnostics} from '@angular/compiler-cli';\n\nimport {AstResult} from './common';\nimport {Declarations, Diagnostic, DiagnosticKind, Diagnostics, Span, TemplateSource} from './types';\nimport {offsetSpan, spanOf} from './utils';\n\nexport interface AstProvider {\n  getTemplateAst(template: TemplateSource, fileName: string): AstResult;\n}\n\nexport function getTemplateDiagnostics(\n    fileName: string, astProvider: AstProvider, templates: TemplateSource[]): Diagnostics {\n  const results: Diagnostics = [];\n  for (const template of templates) {\n    const ast = astProvider.getTemplateAst(template, fileName);\n    if (ast) {\n      if (ast.parseErrors && ast.parseErrors.length) {\n        results.push(...ast.parseErrors.map<Diagnostic>(\n            e => ({\n              kind: DiagnosticKind.Error,\n              span: offsetSpan(spanOf(e.span), template.span.start),\n              message: e.msg\n            })));\n      } else if (ast.templateAst && ast.htmlAst) {\n        const info: DiagnosticTemplateInfo = {\n          templateAst: ast.templateAst,\n          htmlAst: ast.htmlAst,\n          offset: template.span.start,\n          query: template.query,\n          members: template.members\n        };\n        const expressionDiagnostics = getTemplateExpressionDiagnostics(info);\n        results.push(...expressionDiagnostics);\n      }\n      if (ast.errors) {\n        results.push(...ast.errors.map<Diagnostic>(\n            e => ({kind: e.kind, span: e.span || template.span, message: e.message})));\n      }\n    }\n  }\n  return results;\n}\n\nexport function getDeclarationDiagnostics(\n    declarations: Declarations, modules: NgAnalyzedModules): Diagnostics {\n  const results: Diagnostics = [];\n\n  let directives: Set<StaticSymbol>|undefined = undefined;\n  for (const declaration of declarations) {\n    const report = (message: string, span?: Span) => {\n      results.push(<Diagnostic>{\n        kind: DiagnosticKind.Error,\n        span: span || declaration.declarationSpan, message\n      });\n    };\n    for (const error of declaration.errors) {\n      report(error.message, error.span);\n    }\n    if (declaration.metadata) {\n      if (declaration.metadata.isComponent) {\n        if (!modules.ngModuleByPipeOrDirective.has(declaration.type)) {\n          report(\n              `Component '${declaration.type.name}' is not included in a module and will not be available inside a template. Consider adding it to a NgModule declaration`);\n        }\n        if (!declaration.metadata.template !.template &&\n            !declaration.metadata.template !.templateUrl) {\n          report(`Component ${declaration.type.name} must have a template or templateUrl`);\n        }\n      } else {\n        if (!directives) {\n          directives = new Set();\n          modules.ngModules.forEach(module => {\n            module.declaredDirectives.forEach(\n                directive => { directives !.add(directive.reference); });\n          });\n        }\n        if (!directives.has(declaration.type)) {\n          report(\n              `Directive '${declaration.type.name}' is not included in a module and will not be available inside a template. Consider adding it to a NgModule declaration`);\n        }\n      }\n    }\n  }\n\n  return results;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplateInfo} from './common';\nimport {locateSymbol} from './locate_symbol';\nimport {Definition} from './types';\n\nexport function getDefinition(info: TemplateInfo): Definition {\n  const result = locateSymbol(info);\n  return result && result.symbol.definition;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AST, Attribute, BoundDirectivePropertyAst, BoundEventAst, ElementAst, TemplateAst, TemplateAstPath, findNode, tokenReference} from '@angular/compiler';\nimport {getExpressionScope} from '@angular/compiler-cli';\n\nimport {TemplateInfo} from './common';\nimport {getExpressionSymbol} from './expressions';\nimport {Definition, Location, Span, Symbol, SymbolTable} from './types';\nimport {diagnosticInfoFromTemplateInfo, findTemplateAstAt, inSpan, offsetSpan, spanOf} from './utils';\n\nexport interface SymbolInfo {\n  symbol: Symbol;\n  span: Span;\n}\n\nexport function locateSymbol(info: TemplateInfo): SymbolInfo|undefined {\n  if (!info.position) return undefined;\n  const templatePosition = info.position - info.template.span.start;\n  const path = findTemplateAstAt(info.templateAst, templatePosition);\n  if (path.tail) {\n    let symbol: Symbol|undefined = undefined;\n    let span: Span|undefined = undefined;\n    const attributeValueSymbol = (ast: AST, inEvent: boolean = false): boolean => {\n      const attribute = findAttribute(info);\n      if (attribute) {\n        if (inSpan(templatePosition, spanOf(attribute.valueSpan))) {\n          const dinfo = diagnosticInfoFromTemplateInfo(info);\n          const scope = getExpressionScope(dinfo, path, inEvent);\n          if (attribute.valueSpan) {\n            const expressionOffset = attribute.valueSpan.start.offset + 1;\n            const result = getExpressionSymbol(\n                scope, ast, templatePosition - expressionOffset, info.template.query);\n            if (result) {\n              symbol = result.symbol;\n              span = offsetSpan(result.span, expressionOffset);\n            }\n          }\n          return true;\n        }\n      }\n      return false;\n    };\n    path.tail.visit(\n        {\n          visitNgContent(ast) {},\n          visitEmbeddedTemplate(ast) {},\n          visitElement(ast) {\n            const component = ast.directives.find(d => d.directive.isComponent);\n            if (component) {\n              symbol = info.template.query.getTypeSymbol(component.directive.type.reference);\n              symbol = symbol && new OverrideKindSymbol(symbol, 'component');\n              span = spanOf(ast);\n            } else {\n              // Find a directive that matches the element name\n              const directive = ast.directives.find(\n                  d => d.directive.selector != null && d.directive.selector.indexOf(ast.name) >= 0);\n              if (directive) {\n                symbol = info.template.query.getTypeSymbol(directive.directive.type.reference);\n                symbol = symbol && new OverrideKindSymbol(symbol, 'directive');\n                span = spanOf(ast);\n              }\n            }\n          },\n          visitReference(ast) {\n            symbol = ast.value && info.template.query.getTypeSymbol(tokenReference(ast.value));\n            span = spanOf(ast);\n          },\n          visitVariable(ast) {},\n          visitEvent(ast) {\n            if (!attributeValueSymbol(ast.handler, /* inEvent */ true)) {\n              symbol = findOutputBinding(info, path, ast);\n              symbol = symbol && new OverrideKindSymbol(symbol, 'event');\n              span = spanOf(ast);\n            }\n          },\n          visitElementProperty(ast) { attributeValueSymbol(ast.value); },\n          visitAttr(ast) {},\n          visitBoundText(ast) {\n            const expressionPosition = templatePosition - ast.sourceSpan.start.offset;\n            if (inSpan(expressionPosition, ast.value.span)) {\n              const dinfo = diagnosticInfoFromTemplateInfo(info);\n              const scope = getExpressionScope(dinfo, path, /* includeEvent */ false);\n              const result =\n                  getExpressionSymbol(scope, ast.value, expressionPosition, info.template.query);\n              if (result) {\n                symbol = result.symbol;\n                span = offsetSpan(result.span, ast.sourceSpan.start.offset);\n              }\n            }\n          },\n          visitText(ast) {},\n          visitDirective(ast) {\n            symbol = info.template.query.getTypeSymbol(ast.directive.type.reference);\n            span = spanOf(ast);\n          },\n          visitDirectiveProperty(ast) {\n            if (!attributeValueSymbol(ast.value)) {\n              symbol = findInputBinding(info, path, ast);\n              span = spanOf(ast);\n            }\n          }\n        },\n        null);\n    if (symbol && span) {\n      return {symbol, span: offsetSpan(span, info.template.span.start)};\n    }\n  }\n}\n\nfunction findAttribute(info: TemplateInfo): Attribute|undefined {\n  if (info.position) {\n    const templatePosition = info.position - info.template.span.start;\n    const path = findNode(info.htmlAst, templatePosition);\n    return path.first(Attribute);\n  }\n}\n\nfunction findInputBinding(\n    info: TemplateInfo, path: TemplateAstPath, binding: BoundDirectivePropertyAst): Symbol|\n    undefined {\n  const element = path.first(ElementAst);\n  if (element) {\n    for (const directive of element.directives) {\n      const invertedInput = invertMap(directive.directive.inputs);\n      const fieldName = invertedInput[binding.templateName];\n      if (fieldName) {\n        const classSymbol = info.template.query.getTypeSymbol(directive.directive.type.reference);\n        if (classSymbol) {\n          return classSymbol.members().get(fieldName);\n        }\n      }\n    }\n  }\n}\n\nfunction findOutputBinding(\n    info: TemplateInfo, path: TemplateAstPath, binding: BoundEventAst): Symbol|undefined {\n  const element = path.first(ElementAst);\n  if (element) {\n    for (const directive of element.directives) {\n      const invertedOutputs = invertMap(directive.directive.outputs);\n      const fieldName = invertedOutputs[binding.name];\n      if (fieldName) {\n        const classSymbol = info.template.query.getTypeSymbol(directive.directive.type.reference);\n        if (classSymbol) {\n          return classSymbol.members().get(fieldName);\n        }\n      }\n    }\n  }\n}\n\nfunction invertMap(obj: {[name: string]: string}): {[name: string]: string} {\n  const result: {[name: string]: string} = {};\n  for (const name of Object.keys(obj)) {\n    const v = obj[name];\n    result[v] = name;\n  }\n  return result;\n}\n\n/**\n * Wrap a symbol and change its kind to component.\n */\nclass OverrideKindSymbol implements Symbol {\n  constructor(private sym: Symbol, private kindOverride: string) {}\n\n  get name(): string { return this.sym.name; }\n\n  get kind(): string { return this.kindOverride; }\n\n  get language(): string { return this.sym.language; }\n\n  get type(): Symbol|undefined { return this.sym.type; }\n\n  get container(): Symbol|undefined { return this.sym.container; }\n\n  get public(): boolean { return this.sym.public; }\n\n  get callable(): boolean { return this.sym.callable; }\n\n  get nullable(): boolean { return this.sym.nullable; }\n\n  get definition(): Definition { return this.sym.definition; }\n\n  members() { return this.sym.members(); }\n\n  signatures() { return this.sym.signatures(); }\n\n  selectSignature(types: Symbol[]) { return this.sym.selectSignature(types); }\n\n  indexed(argument: Symbol) { return this.sym.indexed(argument); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AST, AstPath, AttrAst, Attribute, BoundDirectivePropertyAst, BoundElementPropertyAst, BoundEventAst, BoundTextAst, CssSelector, DirectiveAst, Element, ElementAst, EmbeddedTemplateAst, ImplicitReceiver, NAMED_ENTITIES, NgContentAst, Node as HtmlAst, NullTemplateVisitor, ParseSpan, PropertyRead, ReferenceAst, SelectorMatcher, TagContentType, TemplateAst, TemplateAstVisitor, Text, TextAst, VariableAst, findNode, getHtmlTagDefinition, splitNsName, templateVisitAll} from '@angular/compiler';\nimport {DiagnosticTemplateInfo, getExpressionScope} from '@angular/compiler-cli';\n\nimport {AstResult, AttrInfo, SelectorInfo, TemplateInfo} from './common';\nimport {getExpressionCompletions} from './expressions';\nimport {attributeNames, elementNames, eventNames, propertyNames} from './html_info';\nimport {BuiltinType, Completion, Completions, Span, Symbol, SymbolDeclaration, SymbolTable, TemplateSource} from './types';\nimport {diagnosticInfoFromTemplateInfo, findTemplateAstAt, flatten, getSelectors, hasTemplateReference, inSpan, removeSuffix, spanOf, uniqueByName} from './utils';\n\nconst TEMPLATE_ATTR_PREFIX = '*';\n\nconst hiddenHtmlElements = {\n  html: true,\n  script: true,\n  noscript: true,\n  base: true,\n  body: true,\n  title: true,\n  head: true,\n  link: true,\n};\n\nexport function getTemplateCompletions(templateInfo: TemplateInfo): Completions|undefined {\n  let result: Completions|undefined = undefined;\n  let {htmlAst, templateAst, template} = templateInfo;\n  // The templateNode starts at the delimiter character so we add 1 to skip it.\n  if (templateInfo.position != null) {\n    let templatePosition = templateInfo.position - template.span.start;\n    let path = findNode(htmlAst, templatePosition);\n    let mostSpecific = path.tail;\n    if (path.empty || !mostSpecific) {\n      result = elementCompletions(templateInfo, path);\n    } else {\n      let astPosition = templatePosition - mostSpecific.sourceSpan.start.offset;\n      mostSpecific.visit(\n          {\n            visitElement(ast) {\n              let startTagSpan = spanOf(ast.sourceSpan);\n              let tagLen = ast.name.length;\n              if (templatePosition <=\n                  startTagSpan.start + tagLen + 1 /* 1 for the opening angle bracked */) {\n                // If we are in the tag then return the element completions.\n                result = elementCompletions(templateInfo, path);\n              } else if (templatePosition < startTagSpan.end) {\n                // We are in the attribute section of the element (but not in an attribute).\n                // Return the attribute completions.\n                result = attributeCompletions(templateInfo, path);\n              }\n            },\n            visitAttribute(ast) {\n              if (!ast.valueSpan || !inSpan(templatePosition, spanOf(ast.valueSpan))) {\n                // We are in the name of an attribute. Show attribute completions.\n                result = attributeCompletions(templateInfo, path);\n              } else if (ast.valueSpan && inSpan(templatePosition, spanOf(ast.valueSpan))) {\n                result = attributeValueCompletions(templateInfo, templatePosition, ast);\n              }\n            },\n            visitText(ast) {\n              // Check if we are in a entity.\n              result = entityCompletions(getSourceText(template, spanOf(ast)), astPosition);\n              if (result) return result;\n              result = interpolationCompletions(templateInfo, templatePosition);\n              if (result) return result;\n              let element = path.first(Element);\n              if (element) {\n                let definition = getHtmlTagDefinition(element.name);\n                if (definition.contentType === TagContentType.PARSABLE_DATA) {\n                  result = voidElementAttributeCompletions(templateInfo, path);\n                  if (!result) {\n                    // If the element can hold content Show element completions.\n                    result = elementCompletions(templateInfo, path);\n                  }\n                }\n              } else {\n                // If no element container, implies parsable data so show elements.\n                result = voidElementAttributeCompletions(templateInfo, path);\n                if (!result) {\n                  result = elementCompletions(templateInfo, path);\n                }\n              }\n            },\n            visitComment(ast) {},\n            visitExpansion(ast) {},\n            visitExpansionCase(ast) {}\n          },\n          null);\n    }\n  }\n  return result;\n}\n\nfunction attributeCompletions(info: TemplateInfo, path: AstPath<HtmlAst>): Completions|undefined {\n  let item = path.tail instanceof Element ? path.tail : path.parentOf(path.tail);\n  if (item instanceof Element) {\n    return attributeCompletionsForElement(info, item.name, item);\n  }\n  return undefined;\n}\n\nfunction attributeCompletionsForElement(\n    info: TemplateInfo, elementName: string, element?: Element): Completions {\n  const attributes = getAttributeInfosForElement(info, elementName, element);\n\n  // Map all the attributes to a completion\n  return attributes.map<Completion>(attr => ({\n                                      kind: attr.fromHtml ? 'html attribute' : 'attribute',\n                                      name: nameOfAttr(attr),\n                                      sort: attr.name\n                                    }));\n}\n\nfunction getAttributeInfosForElement(\n    info: TemplateInfo, elementName: string, element?: Element): AttrInfo[] {\n  let attributes: AttrInfo[] = [];\n\n  // Add html attributes\n  let htmlAttributes = attributeNames(elementName) || [];\n  if (htmlAttributes) {\n    attributes.push(...htmlAttributes.map<AttrInfo>(name => ({name, fromHtml: true})));\n  }\n\n  // Add html properties\n  let htmlProperties = propertyNames(elementName);\n  if (htmlProperties) {\n    attributes.push(...htmlProperties.map<AttrInfo>(name => ({name, input: true})));\n  }\n\n  // Add html events\n  let htmlEvents = eventNames(elementName);\n  if (htmlEvents) {\n    attributes.push(...htmlEvents.map<AttrInfo>(name => ({name, output: true})));\n  }\n\n  let {selectors, map: selectorMap} = getSelectors(info);\n  if (selectors && selectors.length) {\n    // All the attributes that are selectable should be shown.\n    const applicableSelectors =\n        selectors.filter(selector => !selector.element || selector.element == elementName);\n    const selectorAndAttributeNames =\n        applicableSelectors.map(selector => ({selector, attrs: selector.attrs.filter(a => !!a)}));\n    let attrs = flatten(selectorAndAttributeNames.map<AttrInfo[]>(selectorAndAttr => {\n      const directive = selectorMap.get(selectorAndAttr.selector) !;\n      const result = selectorAndAttr.attrs.map<AttrInfo>(\n          name => ({name, input: name in directive.inputs, output: name in directive.outputs}));\n      return result;\n    }));\n\n    // Add template attribute if a directive contains a template reference\n    selectorAndAttributeNames.forEach(selectorAndAttr => {\n      const selector = selectorAndAttr.selector;\n      const directive = selectorMap.get(selector);\n      if (directive && hasTemplateReference(directive.type) && selector.attrs.length &&\n          selector.attrs[0]) {\n        attrs.push({name: selector.attrs[0], template: true});\n      }\n    });\n\n    // All input and output properties of the matching directives should be added.\n    let elementSelector = element ?\n        createElementCssSelector(element) :\n        createElementCssSelector(new Element(elementName, [], [], null !, null, null));\n\n    let matcher = new SelectorMatcher();\n    matcher.addSelectables(selectors);\n    matcher.match(elementSelector, selector => {\n      let directive = selectorMap.get(selector);\n      if (directive) {\n        attrs.push(...Object.keys(directive.inputs).map(name => ({name, input: true})));\n        attrs.push(...Object.keys(directive.outputs).map(name => ({name, output: true})));\n      }\n    });\n\n    // If a name shows up twice, fold it into a single value.\n    attrs = foldAttrs(attrs);\n\n    // Now expand them back out to ensure that input/output shows up as well as input and\n    // output.\n    attributes.push(...flatten(attrs.map(expandedAttr)));\n  }\n  return attributes;\n}\n\nfunction attributeValueCompletions(\n    info: TemplateInfo, position: number, attr: Attribute): Completions|undefined {\n  const path = findTemplateAstAt(info.templateAst, position);\n  const mostSpecific = path.tail;\n  const dinfo = diagnosticInfoFromTemplateInfo(info);\n  if (mostSpecific) {\n    const visitor =\n        new ExpressionVisitor(info, position, attr, () => getExpressionScope(dinfo, path, false));\n    mostSpecific.visit(visitor, null);\n    if (!visitor.result || !visitor.result.length) {\n      // Try allwoing widening the path\n      const widerPath = findTemplateAstAt(info.templateAst, position, /* allowWidening */ true);\n      if (widerPath.tail) {\n        const widerVisitor = new ExpressionVisitor(\n            info, position, attr, () => getExpressionScope(dinfo, widerPath, false));\n        widerPath.tail.visit(widerVisitor, null);\n        return widerVisitor.result;\n      }\n    }\n    return visitor.result;\n  }\n}\n\nfunction elementCompletions(info: TemplateInfo, path: AstPath<HtmlAst>): Completions|undefined {\n  let htmlNames = elementNames().filter(name => !(name in hiddenHtmlElements));\n\n  // Collect the elements referenced by the selectors\n  let directiveElements = getSelectors(info)\n                              .selectors.map(selector => selector.element)\n                              .filter(name => !!name) as string[];\n\n  let components =\n      directiveElements.map<Completion>(name => ({kind: 'component', name, sort: name}));\n  let htmlElements = htmlNames.map<Completion>(name => ({kind: 'element', name: name, sort: name}));\n\n  // Return components and html elements\n  return uniqueByName(htmlElements.concat(components));\n}\n\nfunction entityCompletions(value: string, position: number): Completions|undefined {\n  // Look for entity completions\n  const re = /&[A-Za-z]*;?(?!\\d)/g;\n  let found: RegExpExecArray|null;\n  let result: Completions|undefined = undefined;\n  while (found = re.exec(value)) {\n    let len = found[0].length;\n    if (position >= found.index && position < (found.index + len)) {\n      result = Object.keys(NAMED_ENTITIES)\n                   .map<Completion>(name => ({kind: 'entity', name: `&${name};`, sort: name}));\n      break;\n    }\n  }\n  return result;\n}\n\nfunction interpolationCompletions(info: TemplateInfo, position: number): Completions|undefined {\n  // Look for an interpolation in at the position.\n  const templatePath = findTemplateAstAt(info.templateAst, position);\n  const mostSpecific = templatePath.tail;\n  if (mostSpecific) {\n    let visitor = new ExpressionVisitor(\n        info, position, undefined,\n        () => getExpressionScope(diagnosticInfoFromTemplateInfo(info), templatePath, false));\n    mostSpecific.visit(visitor, null);\n    return uniqueByName(visitor.result);\n  }\n}\n\n// There is a special case of HTML where text that contains a unclosed tag is treated as\n// text. For exaple '<h1> Some <a text </h1>' produces a text nodes inside of the H1\n// element \"Some <a text\". We, however, want to treat this as if the user was requesting\n// the attributes of an \"a\" element, not requesting completion in the a text element. This\n// code checks for this case and returns element completions if it is detected or undefined\n// if it is not.\nfunction voidElementAttributeCompletions(info: TemplateInfo, path: AstPath<HtmlAst>): Completions|\n    undefined {\n  let tail = path.tail;\n  if (tail instanceof Text) {\n    let match = tail.value.match(/<(\\w(\\w|\\d|-)*:)?(\\w(\\w|\\d|-)*)\\s/);\n    // The position must be after the match, otherwise we are still in a place where elements\n    // are expected (such as `<|a` or `<a|`; we only want attributes for `<a |` or after).\n    if (match &&\n        path.position >= (match.index || 0) + match[0].length + tail.sourceSpan.start.offset) {\n      return attributeCompletionsForElement(info, match[3]);\n    }\n  }\n}\n\nclass ExpressionVisitor extends NullTemplateVisitor {\n  private getExpressionScope: () => SymbolTable;\n  result: Completions;\n\n  constructor(\n      private info: TemplateInfo, private position: number, private attr?: Attribute,\n      getExpressionScope?: () => SymbolTable) {\n    super();\n    this.getExpressionScope = getExpressionScope || (() => info.template.members);\n  }\n\n  visitDirectiveProperty(ast: BoundDirectivePropertyAst): void {\n    this.attributeValueCompletions(ast.value);\n  }\n\n  visitElementProperty(ast: BoundElementPropertyAst): void {\n    this.attributeValueCompletions(ast.value);\n  }\n\n  visitEvent(ast: BoundEventAst): void { this.attributeValueCompletions(ast.handler); }\n\n  visitElement(ast: ElementAst): void {\n    if (this.attr && getSelectors(this.info) && this.attr.name.startsWith(TEMPLATE_ATTR_PREFIX)) {\n      // The value is a template expression but the expression AST was not produced when the\n      // TemplateAst was produce so\n      // do that now.\n\n      const key = this.attr.name.substr(TEMPLATE_ATTR_PREFIX.length);\n\n      // Find the selector\n      const selectorInfo = getSelectors(this.info);\n      const selectors = selectorInfo.selectors;\n      const selector =\n          selectors.filter(s => s.attrs.some((attr, i) => i % 2 == 0 && attr == key))[0];\n\n      const templateBindingResult =\n          this.info.expressionParser.parseTemplateBindings(key, this.attr.value, null);\n\n      // find the template binding that contains the position\n      if (!this.attr.valueSpan) return;\n      const valueRelativePosition = this.position - this.attr.valueSpan.start.offset - 1;\n      const bindings = templateBindingResult.templateBindings;\n      const binding =\n          bindings.find(\n              binding => inSpan(valueRelativePosition, binding.span, /* exclusive */ true)) ||\n          bindings.find(binding => inSpan(valueRelativePosition, binding.span));\n\n      const keyCompletions = () => {\n        let keys: string[] = [];\n        if (selector) {\n          const attrNames = selector.attrs.filter((_, i) => i % 2 == 0);\n          keys = attrNames.filter(name => name.startsWith(key) && name != key)\n                     .map(name => lowerName(name.substr(key.length)));\n        }\n        keys.push('let');\n        this.result = keys.map(key => <Completion>{kind: 'key', name: key, sort: key});\n      };\n\n      if (!binding || (binding.key == key && !binding.expression)) {\n        // We are in the root binding. We should return `let` and keys that are left in the\n        // selector.\n        keyCompletions();\n      } else if (binding.keyIsVar) {\n        const equalLocation = this.attr.value.indexOf('=');\n        this.result = [];\n        if (equalLocation >= 0 && valueRelativePosition >= equalLocation) {\n          // We are after the '=' in a let clause. The valid values here are the members of the\n          // template reference's type parameter.\n          const directiveMetadata = selectorInfo.map.get(selector);\n          if (directiveMetadata) {\n            const contextTable =\n                this.info.template.query.getTemplateContext(directiveMetadata.type.reference);\n            if (contextTable) {\n              this.result = this.symbolsToCompletions(contextTable.values());\n            }\n          }\n        } else if (binding.key && valueRelativePosition <= (binding.key.length - key.length)) {\n          keyCompletions();\n        }\n      } else {\n        // If the position is in the expression or after the key or there is no key, return the\n        // expression completions\n        if ((binding.expression && inSpan(valueRelativePosition, binding.expression.ast.span)) ||\n            (binding.key &&\n             valueRelativePosition > binding.span.start + (binding.key.length - key.length)) ||\n            !binding.key) {\n          const span = new ParseSpan(0, this.attr.value.length);\n          this.attributeValueCompletions(\n              binding.expression ? binding.expression.ast :\n                                   new PropertyRead(span, new ImplicitReceiver(span), ''),\n              valueRelativePosition);\n        } else {\n          keyCompletions();\n        }\n      }\n    }\n  }\n\n  visitBoundText(ast: BoundTextAst) {\n    const expressionPosition = this.position - ast.sourceSpan.start.offset;\n    if (inSpan(expressionPosition, ast.value.span)) {\n      const completions = getExpressionCompletions(\n          this.getExpressionScope(), ast.value, expressionPosition, this.info.template.query);\n      if (completions) {\n        this.result = this.symbolsToCompletions(completions);\n      }\n    }\n  }\n\n  private attributeValueCompletions(value: AST, position?: number) {\n    const symbols = getExpressionCompletions(\n        this.getExpressionScope(), value, position == null ? this.attributeValuePosition : position,\n        this.info.template.query);\n    if (symbols) {\n      this.result = this.symbolsToCompletions(symbols);\n    }\n  }\n\n  private symbolsToCompletions(symbols: Symbol[]): Completions {\n    return symbols.filter(s => !s.name.startsWith('__') && s.public)\n        .map(symbol => <Completion>{kind: symbol.kind, name: symbol.name, sort: symbol.name});\n  }\n\n  private get attributeValuePosition() {\n    if (this.attr && this.attr.valueSpan) {\n      return this.position - this.attr.valueSpan.start.offset - 1;\n    }\n    return 0;\n  }\n}\n\nfunction getSourceText(template: TemplateSource, span: Span): string {\n  return template.source.substring(span.start, span.end);\n}\n\nfunction nameOfAttr(attr: AttrInfo): string {\n  let name = attr.name;\n  if (attr.output) {\n    name = removeSuffix(name, 'Events');\n    name = removeSuffix(name, 'Changed');\n  }\n  let result = [name];\n  if (attr.input) {\n    result.unshift('[');\n    result.push(']');\n  }\n  if (attr.output) {\n    result.unshift('(');\n    result.push(')');\n  }\n  if (attr.template) {\n    result.unshift('*');\n  }\n  return result.join('');\n}\n\nconst templateAttr = /^(\\w+:)?(template$|^\\*)/;\nfunction createElementCssSelector(element: Element): CssSelector {\n  const cssSelector = new CssSelector();\n  let elNameNoNs = splitNsName(element.name)[1];\n\n  cssSelector.setElement(elNameNoNs);\n\n  for (let attr of element.attrs) {\n    if (!attr.name.match(templateAttr)) {\n      let [_, attrNameNoNs] = splitNsName(attr.name);\n      cssSelector.addAttribute(attrNameNoNs, attr.value);\n      if (attr.name.toLowerCase() == 'class') {\n        const classes = attr.value.split(/s+/g);\n        classes.forEach(className => cssSelector.addClassName(className));\n      }\n    }\n  }\n  return cssSelector;\n}\n\nfunction foldAttrs(attrs: AttrInfo[]): AttrInfo[] {\n  let inputOutput = new Map<string, AttrInfo>();\n  let templates = new Map<string, AttrInfo>();\n  let result: AttrInfo[] = [];\n  attrs.forEach(attr => {\n    if (attr.fromHtml) {\n      return attr;\n    }\n    if (attr.template) {\n      let duplicate = templates.get(attr.name);\n      if (!duplicate) {\n        result.push({name: attr.name, template: true});\n        templates.set(attr.name, attr);\n      }\n    }\n    if (attr.input || attr.output) {\n      let duplicate = inputOutput.get(attr.name);\n      if (duplicate) {\n        duplicate.input = duplicate.input || attr.input;\n        duplicate.output = duplicate.output || attr.output;\n      } else {\n        let cloneAttr: AttrInfo = {name: attr.name};\n        if (attr.input) cloneAttr.input = true;\n        if (attr.output) cloneAttr.output = true;\n        result.push(cloneAttr);\n        inputOutput.set(attr.name, cloneAttr);\n      }\n    }\n  });\n  return result;\n}\n\nfunction expandedAttr(attr: AttrInfo): AttrInfo[] {\n  if (attr.input && attr.output) {\n    return [\n      attr, {name: attr.name, input: true, output: false},\n      {name: attr.name, input: false, output: true}\n    ];\n  }\n  return [attr];\n}\n\nfunction lowerName(name: string): string {\n  return name && (name[0].toLowerCase() + name.substr(1));\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Information about the HTML DOM elements\n\n// This section defines the HTML elements and attribute surface of HTML 4\n// which is derived from https://www.w3.org/TR/html4/strict.dtd\ntype attrType = string | string[];\ntype hash<T> = {\n  [name: string]: T\n};\n\nconst values: attrType[] = [\n  'ID',\n  'CDATA',\n  'NAME',\n  ['ltr', 'rtl'],\n  ['rect', 'circle', 'poly', 'default'],\n  'NUMBER',\n  ['nohref'],\n  ['ismap'],\n  ['declare'],\n  ['DATA', 'REF', 'OBJECT'],\n  ['GET', 'POST'],\n  'IDREF',\n  ['TEXT', 'PASSWORD', 'CHECKBOX', 'RADIO', 'SUBMIT', 'RESET', 'FILE', 'HIDDEN', 'IMAGE', 'BUTTON'],\n  ['checked'],\n  ['disabled'],\n  ['readonly'],\n  ['multiple'],\n  ['selected'],\n  ['button', 'submit', 'reset'],\n  ['void', 'above', 'below', 'hsides', 'lhs', 'rhs', 'vsides', 'box', 'border'],\n  ['none', 'groups', 'rows', 'cols', 'all'],\n  ['left', 'center', 'right', 'justify', 'char'],\n  ['top', 'middle', 'bottom', 'baseline'],\n  'IDREFS',\n  ['row', 'col', 'rowgroup', 'colgroup'],\n  ['defer']\n];\n\nconst groups: hash<number>[] = [\n  {id: 0},\n  {\n    onclick: 1,\n    ondblclick: 1,\n    onmousedown: 1,\n    onmouseup: 1,\n    onmouseover: 1,\n    onmousemove: 1,\n    onmouseout: 1,\n    onkeypress: 1,\n    onkeydown: 1,\n    onkeyup: 1\n  },\n  {lang: 2, dir: 3},\n  {onload: 1, onunload: 1},\n  {name: 1},\n  {href: 1},\n  {type: 1},\n  {alt: 1},\n  {tabindex: 5},\n  {media: 1},\n  {nohref: 6},\n  {usemap: 1},\n  {src: 1},\n  {onfocus: 1, onblur: 1},\n  {charset: 1},\n  {declare: 8, classid: 1, codebase: 1, data: 1, codetype: 1, archive: 1, standby: 1},\n  {title: 1},\n  {value: 1},\n  {cite: 1},\n  {datetime: 1},\n  {accept: 1},\n  {shape: 4, coords: 1},\n  { for: 11\n  },\n  {action: 1, method: 10, enctype: 1, onsubmit: 1, onreset: 1, 'accept-charset': 1},\n  {valuetype: 9},\n  {longdesc: 1},\n  {width: 1},\n  {disabled: 14},\n  {readonly: 15, onselect: 1},\n  {accesskey: 1},\n  {size: 5, multiple: 16},\n  {onchange: 1},\n  {label: 1},\n  {selected: 17},\n  {type: 12, checked: 13, size: 1, maxlength: 5},\n  {rows: 5, cols: 5},\n  {type: 18},\n  {height: 1},\n  {summary: 1, border: 1, frame: 19, rules: 20, cellspacing: 1, cellpadding: 1, datapagesize: 1},\n  {align: 21, char: 1, charoff: 1, valign: 22},\n  {span: 5},\n  {abbr: 1, axis: 1, headers: 23, scope: 24, rowspan: 5, colspan: 5},\n  {profile: 1},\n  {'http-equiv': 2, name: 2, content: 1, scheme: 1},\n  {class: 1, style: 1},\n  {hreflang: 2, rel: 1, rev: 1},\n  {ismap: 7},\n  { defer: 25, event: 1, for : 1 }\n];\n\nconst elements: {[name: string]: number[]} = {\n  TT: [0, 1, 2, 16, 44],\n  I: [0, 1, 2, 16, 44],\n  B: [0, 1, 2, 16, 44],\n  BIG: [0, 1, 2, 16, 44],\n  SMALL: [0, 1, 2, 16, 44],\n  EM: [0, 1, 2, 16, 44],\n  STRONG: [0, 1, 2, 16, 44],\n  DFN: [0, 1, 2, 16, 44],\n  CODE: [0, 1, 2, 16, 44],\n  SAMP: [0, 1, 2, 16, 44],\n  KBD: [0, 1, 2, 16, 44],\n  VAR: [0, 1, 2, 16, 44],\n  CITE: [0, 1, 2, 16, 44],\n  ABBR: [0, 1, 2, 16, 44],\n  ACRONYM: [0, 1, 2, 16, 44],\n  SUB: [0, 1, 2, 16, 44],\n  SUP: [0, 1, 2, 16, 44],\n  SPAN: [0, 1, 2, 16, 44],\n  BDO: [0, 2, 16, 44],\n  BR: [0, 16, 44],\n  BODY: [0, 1, 2, 3, 16, 44],\n  ADDRESS: [0, 1, 2, 16, 44],\n  DIV: [0, 1, 2, 16, 44],\n  A: [0, 1, 2, 4, 5, 6, 8, 13, 14, 16, 21, 29, 44, 45],\n  MAP: [0, 1, 2, 4, 16, 44],\n  AREA: [0, 1, 2, 5, 7, 8, 10, 13, 16, 21, 29, 44],\n  LINK: [0, 1, 2, 5, 6, 9, 14, 16, 44, 45],\n  IMG: [0, 1, 2, 4, 7, 11, 12, 16, 25, 26, 37, 44, 46],\n  OBJECT: [0, 1, 2, 4, 6, 8, 11, 15, 16, 26, 37, 44],\n  PARAM: [0, 4, 6, 17, 24],\n  HR: [0, 1, 2, 16, 44],\n  P: [0, 1, 2, 16, 44],\n  H1: [0, 1, 2, 16, 44],\n  H2: [0, 1, 2, 16, 44],\n  H3: [0, 1, 2, 16, 44],\n  H4: [0, 1, 2, 16, 44],\n  H5: [0, 1, 2, 16, 44],\n  H6: [0, 1, 2, 16, 44],\n  PRE: [0, 1, 2, 16, 44],\n  Q: [0, 1, 2, 16, 18, 44],\n  BLOCKQUOTE: [0, 1, 2, 16, 18, 44],\n  INS: [0, 1, 2, 16, 18, 19, 44],\n  DEL: [0, 1, 2, 16, 18, 19, 44],\n  DL: [0, 1, 2, 16, 44],\n  DT: [0, 1, 2, 16, 44],\n  DD: [0, 1, 2, 16, 44],\n  OL: [0, 1, 2, 16, 44],\n  UL: [0, 1, 2, 16, 44],\n  LI: [0, 1, 2, 16, 44],\n  FORM: [0, 1, 2, 4, 16, 20, 23, 44],\n  LABEL: [0, 1, 2, 13, 16, 22, 29, 44],\n  INPUT: [0, 1, 2, 4, 7, 8, 11, 12, 13, 16, 17, 20, 27, 28, 29, 31, 34, 44, 46],\n  SELECT: [0, 1, 2, 4, 8, 13, 16, 27, 30, 31, 44],\n  OPTGROUP: [0, 1, 2, 16, 27, 32, 44],\n  OPTION: [0, 1, 2, 16, 17, 27, 32, 33, 44],\n  TEXTAREA: [0, 1, 2, 4, 8, 13, 16, 27, 28, 29, 31, 35, 44],\n  FIELDSET: [0, 1, 2, 16, 44],\n  LEGEND: [0, 1, 2, 16, 29, 44],\n  BUTTON: [0, 1, 2, 4, 8, 13, 16, 17, 27, 29, 36, 44],\n  TABLE: [0, 1, 2, 16, 26, 38, 44],\n  CAPTION: [0, 1, 2, 16, 44],\n  COLGROUP: [0, 1, 2, 16, 26, 39, 40, 44],\n  COL: [0, 1, 2, 16, 26, 39, 40, 44],\n  THEAD: [0, 1, 2, 16, 39, 44],\n  TBODY: [0, 1, 2, 16, 39, 44],\n  TFOOT: [0, 1, 2, 16, 39, 44],\n  TR: [0, 1, 2, 16, 39, 44],\n  TH: [0, 1, 2, 16, 39, 41, 44],\n  TD: [0, 1, 2, 16, 39, 41, 44],\n  HEAD: [2, 42],\n  TITLE: [2],\n  BASE: [5],\n  META: [2, 43],\n  STYLE: [2, 6, 9, 16],\n  SCRIPT: [6, 12, 14, 47],\n  NOSCRIPT: [0, 1, 2, 16, 44],\n  HTML: [2]\n};\n\nconst defaultAttributes = [0, 1, 2, 4];\n\nexport function elementNames(): string[] {\n  return Object.keys(elements).sort().map(v => v.toLowerCase());\n}\n\nfunction compose(indexes: number[] | undefined): hash<attrType> {\n  const result: hash<attrType> = {};\n  if (indexes) {\n    for (let index of indexes) {\n      const group = groups[index];\n      for (let name in group)\n        if (group.hasOwnProperty(name)) result[name] = values[group[name]];\n    }\n  }\n  return result;\n}\n\nexport function attributeNames(element: string): string[] {\n  return Object.keys(compose(elements[element.toUpperCase()] || defaultAttributes)).sort();\n}\n\nexport function attributeType(element: string, attribute: string): string|string[]|undefined {\n  return compose(elements[element.toUpperCase()] || defaultAttributes)[attribute.toLowerCase()];\n}\n\n// This section is describes the DOM property surface of a DOM element and is derivgulp formated\n// from\n// from the SCHEMA strings from the security context information. SCHEMA is copied here because\n// it would be an unnecessary risk to allow this array to be imported from the security context\n// schema registry.\nconst SCHEMA: string[] = [\n  '[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop,slot' +\n      /* added manually to avoid breaking changes */\n      ',*message,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored',\n  '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,outerText,!spellcheck,%style,#tabIndex,title,!translate',\n  'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,outerText,!spellcheck,%style,#tabIndex,title,!translate',\n  'media^[HTMLElement]|!autoplay,!controls,%controlsList,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,*waitingforkey,#playbackRate,preload,src,%srcObject,#volume',\n  ':svg:^[HTMLElement]|*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex',\n  ':svg:graphics^:svg:|',\n  ':svg:animation^:svg:|*begin,*end,*repeat',\n  ':svg:geometry^:svg:|',\n  ':svg:componentTransferFunction^:svg:|',\n  ':svg:gradient^:svg:|',\n  ':svg:textContent^:svg:graphics|',\n  ':svg:textPositioning^:svg:textContent|',\n  'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username',\n  'area^[HTMLElement]|alt,coords,download,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,rel,search,shape,target,username',\n  'audio^media|',\n  'br^[HTMLElement]|clear',\n  'base^[HTMLElement]|href,target',\n  'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink',\n  'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value',\n  'canvas^[HTMLElement]|#height,#width',\n  'content^[HTMLElement]|select',\n  'dl^[HTMLElement]|!compact',\n  'datalist^[HTMLElement]|',\n  'details^[HTMLElement]|!open',\n  'dialog^[HTMLElement]|!open,returnValue',\n  'dir^[HTMLElement]|!compact',\n  'div^[HTMLElement]|align',\n  'embed^[HTMLElement]|align,height,name,src,type,width',\n  'fieldset^[HTMLElement]|!disabled,name',\n  'font^[HTMLElement]|color,face,size',\n  'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target',\n  'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src',\n  'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows',\n  'hr^[HTMLElement]|align,color,!noShade,size,width',\n  'head^[HTMLElement]|',\n  'h1,h2,h3,h4,h5,h6^[HTMLElement]|align',\n  'html^[HTMLElement]|version',\n  'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width',\n  'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width',\n  'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width',\n  'li^[HTMLElement]|type,#value',\n  'label^[HTMLElement]|htmlFor',\n  'legend^[HTMLElement]|align',\n  'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,referrerPolicy,rel,%relList,rev,%sizes,target,type',\n  'map^[HTMLElement]|name',\n  'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width',\n  'menu^[HTMLElement]|!compact',\n  'meta^[HTMLElement]|content,httpEquiv,name,scheme',\n  'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value',\n  'ins,del^[HTMLElement]|cite,dateTime',\n  'ol^[HTMLElement]|!compact,!reversed,#start,type',\n  'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width',\n  'optgroup^[HTMLElement]|!disabled,label',\n  'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value',\n  'output^[HTMLElement]|defaultValue,%htmlFor,name,value',\n  'p^[HTMLElement]|align',\n  'param^[HTMLElement]|name,type,value,valueType',\n  'picture^[HTMLElement]|',\n  'pre^[HTMLElement]|#width',\n  'progress^[HTMLElement]|#max,#value',\n  'q,blockquote,cite^[HTMLElement]|',\n  'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type',\n  'select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value',\n  'shadow^[HTMLElement]|',\n  'slot^[HTMLElement]|name',\n  'source^[HTMLElement]|media,sizes,src,srcset,type',\n  'span^[HTMLElement]|',\n  'style^[HTMLElement]|!disabled,media,type',\n  'caption^[HTMLElement]|align',\n  'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width',\n  'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width',\n  'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width',\n  'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign',\n  'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign',\n  'template^[HTMLElement]|',\n  'textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap',\n  'title^[HTMLElement]|text',\n  'track^[HTMLElement]|!default,kind,label,src,srclang',\n  'ul^[HTMLElement]|!compact,type',\n  'unknown^[HTMLElement]|',\n  'video^media|#height,poster,#width',\n  ':svg:a^:svg:graphics|',\n  ':svg:animate^:svg:animation|',\n  ':svg:animateMotion^:svg:animation|',\n  ':svg:animateTransform^:svg:animation|',\n  ':svg:circle^:svg:geometry|',\n  ':svg:clipPath^:svg:graphics|',\n  ':svg:defs^:svg:graphics|',\n  ':svg:desc^:svg:|',\n  ':svg:discard^:svg:|',\n  ':svg:ellipse^:svg:geometry|',\n  ':svg:feBlend^:svg:|',\n  ':svg:feColorMatrix^:svg:|',\n  ':svg:feComponentTransfer^:svg:|',\n  ':svg:feComposite^:svg:|',\n  ':svg:feConvolveMatrix^:svg:|',\n  ':svg:feDiffuseLighting^:svg:|',\n  ':svg:feDisplacementMap^:svg:|',\n  ':svg:feDistantLight^:svg:|',\n  ':svg:feDropShadow^:svg:|',\n  ':svg:feFlood^:svg:|',\n  ':svg:feFuncA^:svg:componentTransferFunction|',\n  ':svg:feFuncB^:svg:componentTransferFunction|',\n  ':svg:feFuncG^:svg:componentTransferFunction|',\n  ':svg:feFuncR^:svg:componentTransferFunction|',\n  ':svg:feGaussianBlur^:svg:|',\n  ':svg:feImage^:svg:|',\n  ':svg:feMerge^:svg:|',\n  ':svg:feMergeNode^:svg:|',\n  ':svg:feMorphology^:svg:|',\n  ':svg:feOffset^:svg:|',\n  ':svg:fePointLight^:svg:|',\n  ':svg:feSpecularLighting^:svg:|',\n  ':svg:feSpotLight^:svg:|',\n  ':svg:feTile^:svg:|',\n  ':svg:feTurbulence^:svg:|',\n  ':svg:filter^:svg:|',\n  ':svg:foreignObject^:svg:graphics|',\n  ':svg:g^:svg:graphics|',\n  ':svg:image^:svg:graphics|',\n  ':svg:line^:svg:geometry|',\n  ':svg:linearGradient^:svg:gradient|',\n  ':svg:mpath^:svg:|',\n  ':svg:marker^:svg:|',\n  ':svg:mask^:svg:|',\n  ':svg:metadata^:svg:|',\n  ':svg:path^:svg:geometry|',\n  ':svg:pattern^:svg:|',\n  ':svg:polygon^:svg:geometry|',\n  ':svg:polyline^:svg:geometry|',\n  ':svg:radialGradient^:svg:gradient|',\n  ':svg:rect^:svg:geometry|',\n  ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan',\n  ':svg:script^:svg:|type',\n  ':svg:set^:svg:animation|',\n  ':svg:stop^:svg:|',\n  ':svg:style^:svg:|!disabled,media,title,type',\n  ':svg:switch^:svg:graphics|',\n  ':svg:symbol^:svg:|',\n  ':svg:tspan^:svg:textPositioning|',\n  ':svg:text^:svg:textPositioning|',\n  ':svg:textPath^:svg:textContent|',\n  ':svg:title^:svg:|',\n  ':svg:use^:svg:graphics|',\n  ':svg:view^:svg:|#zoomAndPan',\n  'data^[HTMLElement]|value',\n  'keygen^[HTMLElement]|!autofocus,challenge,!disabled,form,keytype,name',\n  'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default',\n  'summary^[HTMLElement]|',\n  'time^[HTMLElement]|dateTime',\n  ':svg:cursor^:svg:|',\n];\n\nconst attrToPropMap: {[name: string]: string} = <any>{\n  'class': 'className',\n  'formaction': 'formAction',\n  'innerHtml': 'innerHTML',\n  'readonly': 'readOnly',\n  'tabindex': 'tabIndex'\n};\n\nconst EVENT = 'event';\nconst BOOLEAN = 'boolean';\nconst NUMBER = 'number';\nconst STRING = 'string';\nconst OBJECT = 'object';\n\nexport class SchemaInformation {\n  schema = <{[element: string]: {[property: string]: string}}>{};\n\n  constructor() {\n    SCHEMA.forEach(encodedType => {\n      const parts = encodedType.split('|');\n      const properties = parts[1].split(',');\n      const typeParts = (parts[0] + '^').split('^');\n      const typeName = typeParts[0];\n      const type = <{[property: string]: string}>{};\n      typeName.split(',').forEach(tag => this.schema[tag.toLowerCase()] = type);\n      const superName = typeParts[1];\n      const superType = superName && this.schema[superName.toLowerCase()];\n      if (superType) {\n        for (const key in superType) {\n          type[key] = superType[key];\n        }\n      }\n      properties.forEach((property: string) => {\n        if (property == '') {\n        } else if (property.startsWith('*')) {\n          type[property.substring(1)] = EVENT;\n        } else if (property.startsWith('!')) {\n          type[property.substring(1)] = BOOLEAN;\n        } else if (property.startsWith('#')) {\n          type[property.substring(1)] = NUMBER;\n        } else if (property.startsWith('%')) {\n          type[property.substring(1)] = OBJECT;\n        } else {\n          type[property] = STRING;\n        }\n      });\n    });\n  }\n\n  allKnownElements(): string[] { return Object.keys(this.schema); }\n\n  eventsOf(elementName: string): string[] {\n    const elementType = this.schema[elementName.toLowerCase()] || {};\n    return Object.keys(elementType).filter(property => elementType[property] === EVENT);\n  }\n\n  propertiesOf(elementName: string): string[] {\n    const elementType = this.schema[elementName.toLowerCase()] || {};\n    return Object.keys(elementType).filter(property => elementType[property] !== EVENT);\n  }\n\n  typeOf(elementName: string, property: string): string {\n    return (this.schema[elementName.toLowerCase()] || {})[property];\n  }\n\n  private static _instance: SchemaInformation;\n\n  static get instance(): SchemaInformation {\n    let result = SchemaInformation._instance;\n    if (!result) {\n      result = SchemaInformation._instance = new SchemaInformation();\n    }\n    return result;\n  }\n}\n\nexport function eventNames(elementName: string): string[] {\n  return SchemaInformation.instance.eventsOf(elementName);\n}\n\nexport function propertyNames(elementName: string): string[] {\n  return SchemaInformation.instance.propertiesOf(elementName);\n}\n\nexport function propertyType(elementName: string, propertyName: string): string {\n  return SchemaInformation.instance.typeOf(elementName, propertyName);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AST, ASTWithSource, AstPath as AstPathBase, NullAstVisitor, visitAstChildren} from '@angular/compiler';\nimport {AstType} from '@angular/compiler-cli';\n\nimport {BuiltinType, Span, Symbol, SymbolQuery, SymbolTable} from './types';\nimport {inSpan} from './utils';\n\ntype AstPath = AstPathBase<AST>;\n\nfunction findAstAt(ast: AST, position: number, excludeEmpty: boolean = false): AstPath {\n  const path: AST[] = [];\n  const visitor = new class extends NullAstVisitor {\n    visit(ast: AST) {\n      if ((!excludeEmpty || ast.span.start < ast.span.end) && inSpan(position, ast.span)) {\n        path.push(ast);\n        visitAstChildren(ast, this);\n      }\n    }\n  };\n\n  // We never care about the ASTWithSource node and its visit() method calls its ast's visit so\n  // the visit() method above would never see it.\n  if (ast instanceof ASTWithSource) {\n    ast = ast.ast;\n  }\n\n  visitor.visit(ast);\n\n  return new AstPathBase<AST>(path, position);\n}\n\nexport function getExpressionCompletions(\n    scope: SymbolTable, ast: AST, position: number, query: SymbolQuery): Symbol[]|undefined {\n  const path = findAstAt(ast, position);\n  if (path.empty) return undefined;\n  const tail = path.tail !;\n  let result: SymbolTable|undefined = scope;\n\n  function getType(ast: AST): Symbol { return new AstType(scope, query, {}).getType(ast); }\n\n  // If the completion request is in a not in a pipe or property access then the global scope\n  // (that is the scope of the implicit receiver) is the right scope as the user is typing the\n  // beginning of an expression.\n  tail.visit({\n    visitBinary(ast) {},\n    visitChain(ast) {},\n    visitConditional(ast) {},\n    visitFunctionCall(ast) {},\n    visitImplicitReceiver(ast) {},\n    visitInterpolation(ast) { result = undefined; },\n    visitKeyedRead(ast) {},\n    visitKeyedWrite(ast) {},\n    visitLiteralArray(ast) {},\n    visitLiteralMap(ast) {},\n    visitLiteralPrimitive(ast) {},\n    visitMethodCall(ast) {},\n    visitPipe(ast) {\n      if (position >= ast.exp.span.end &&\n          (!ast.args || !ast.args.length || position < (<AST>ast.args[0]).span.start)) {\n        // We are in a position a pipe name is expected.\n        result = query.getPipes();\n      }\n    },\n    visitPrefixNot(ast) {},\n    visitNonNullAssert(ast) {},\n    visitPropertyRead(ast) {\n      const receiverType = getType(ast.receiver);\n      result = receiverType ? receiverType.members() : scope;\n    },\n    visitPropertyWrite(ast) {\n      const receiverType = getType(ast.receiver);\n      result = receiverType ? receiverType.members() : scope;\n    },\n    visitQuote(ast) {\n      // For a quote, return the members of any (if there are any).\n      result = query.getBuiltinType(BuiltinType.Any).members();\n    },\n    visitSafeMethodCall(ast) {\n      const receiverType = getType(ast.receiver);\n      result = receiverType ? receiverType.members() : scope;\n    },\n    visitSafePropertyRead(ast) {\n      const receiverType = getType(ast.receiver);\n      result = receiverType ? receiverType.members() : scope;\n    },\n  });\n\n  return result && result.values();\n}\n\nexport function getExpressionSymbol(\n    scope: SymbolTable, ast: AST, position: number,\n    query: SymbolQuery): {symbol: Symbol, span: Span}|undefined {\n  const path = findAstAt(ast, position, /* excludeEmpty */ true);\n  if (path.empty) return undefined;\n  const tail = path.tail !;\n\n  function getType(ast: AST): Symbol { return new AstType(scope, query, {}).getType(ast); }\n\n  let symbol: Symbol|undefined = undefined;\n  let span: Span|undefined = undefined;\n\n  // If the completion request is in a not in a pipe or property access then the global scope\n  // (that is the scope of the implicit receiver) is the right scope as the user is typing the\n  // beginning of an expression.\n  tail.visit({\n    visitBinary(ast) {},\n    visitChain(ast) {},\n    visitConditional(ast) {},\n    visitFunctionCall(ast) {},\n    visitImplicitReceiver(ast) {},\n    visitInterpolation(ast) {},\n    visitKeyedRead(ast) {},\n    visitKeyedWrite(ast) {},\n    visitLiteralArray(ast) {},\n    visitLiteralMap(ast) {},\n    visitLiteralPrimitive(ast) {},\n    visitMethodCall(ast) {\n      const receiverType = getType(ast.receiver);\n      symbol = receiverType && receiverType.members().get(ast.name);\n      span = ast.span;\n    },\n    visitPipe(ast) {\n      if (position >= ast.exp.span.end &&\n          (!ast.args || !ast.args.length || position < (<AST>ast.args[0]).span.start)) {\n        // We are in a position a pipe name is expected.\n        const pipes = query.getPipes();\n        if (pipes) {\n          symbol = pipes.get(ast.name);\n          span = ast.span;\n        }\n      }\n    },\n    visitPrefixNot(ast) {},\n    visitNonNullAssert(ast) {},\n    visitPropertyRead(ast) {\n      const receiverType = getType(ast.receiver);\n      symbol = receiverType && receiverType.members().get(ast.name);\n      span = ast.span;\n    },\n    visitPropertyWrite(ast) {\n      const receiverType = getType(ast.receiver);\n      symbol = receiverType && receiverType.members().get(ast.name);\n      span = ast.span;\n    },\n    visitQuote(ast) {},\n    visitSafeMethodCall(ast) {\n      const receiverType = getType(ast.receiver);\n      symbol = receiverType && receiverType.members().get(ast.name);\n      span = ast.span;\n    },\n    visitSafePropertyRead(ast) {\n      const receiverType = getType(ast.receiver);\n      symbol = receiverType && receiverType.members().get(ast.name);\n      span = ast.span;\n    },\n  });\n\n  if (symbol && span) {\n    return {symbol, span};\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AstPath, CompileDirectiveSummary, CompileTypeMetadata, CssSelector, DirectiveAst, ElementAst, EmbeddedTemplateAst, HtmlAstPath, Node as HtmlNode, ParseSourceSpan, RecursiveTemplateAstVisitor, RecursiveVisitor, TemplateAst, TemplateAstPath, identifierName, templateVisitAll, visitAll} from '@angular/compiler';\nimport {DiagnosticTemplateInfo} from '@angular/compiler-cli';\nimport * as ts from 'typescript';\n\nimport {SelectorInfo, TemplateInfo} from './common';\nimport {Span} from './types';\n\nexport interface SpanHolder {\n  sourceSpan: ParseSourceSpan;\n  endSourceSpan?: ParseSourceSpan|null;\n  children?: SpanHolder[];\n}\n\nexport function isParseSourceSpan(value: any): value is ParseSourceSpan {\n  return value && !!value.start;\n}\n\nexport function spanOf(span: SpanHolder): Span;\nexport function spanOf(span: ParseSourceSpan): Span;\nexport function spanOf(span: SpanHolder | ParseSourceSpan | undefined): Span|undefined;\nexport function spanOf(span?: SpanHolder | ParseSourceSpan): Span|undefined {\n  if (!span) return undefined;\n  if (isParseSourceSpan(span)) {\n    return {start: span.start.offset, end: span.end.offset};\n  } else {\n    if (span.endSourceSpan) {\n      return {start: span.sourceSpan.start.offset, end: span.endSourceSpan.end.offset};\n    } else if (span.children && span.children.length) {\n      return {\n        start: span.sourceSpan.start.offset,\n        end: spanOf(span.children[span.children.length - 1]) !.end\n      };\n    }\n    return {start: span.sourceSpan.start.offset, end: span.sourceSpan.end.offset};\n  }\n}\n\nexport function inSpan(position: number, span?: Span, exclusive?: boolean): boolean {\n  return span != null && (exclusive ? position >= span.start && position < span.end :\n                                      position >= span.start && position <= span.end);\n}\n\nexport function offsetSpan(span: Span, amount: number): Span {\n  return {start: span.start + amount, end: span.end + amount};\n}\n\nexport function isNarrower(spanA: Span, spanB: Span): boolean {\n  return spanA.start >= spanB.start && spanA.end <= spanB.end;\n}\n\nexport function hasTemplateReference(type: CompileTypeMetadata): boolean {\n  if (type.diDeps) {\n    for (let diDep of type.diDeps) {\n      if (diDep.token && diDep.token.identifier &&\n          identifierName(diDep.token !.identifier !) == 'TemplateRef')\n        return true;\n    }\n  }\n  return false;\n}\n\nexport function getSelectors(info: TemplateInfo): SelectorInfo {\n  const map = new Map<CssSelector, CompileDirectiveSummary>();\n  const selectors: CssSelector[] = flatten(info.directives.map(directive => {\n    const selectors: CssSelector[] = CssSelector.parse(directive.selector !);\n    selectors.forEach(selector => map.set(selector, directive));\n    return selectors;\n  }));\n  return {selectors, map};\n}\n\nexport function flatten<T>(a: T[][]) {\n  return (<T[]>[]).concat(...a);\n}\n\nexport function removeSuffix(value: string, suffix: string) {\n  if (value.endsWith(suffix)) return value.substring(0, value.length - suffix.length);\n  return value;\n}\n\nexport function uniqueByName < T extends {\n  name: string;\n}\n> (elements: T[] | undefined): T[]|undefined {\n  if (elements) {\n    const result: T[] = [];\n    const set = new Set<string>();\n    for (const element of elements) {\n      if (!set.has(element.name)) {\n        set.add(element.name);\n        result.push(element);\n      }\n    }\n    return result;\n  }\n}\n\nexport function isTypescriptVersion(low: string, high?: string) {\n  const version = ts.version;\n\n  if (version.substring(0, low.length) < low) return false;\n\n  if (high && (version.substring(0, high.length) > high)) return false;\n\n  return true;\n}\n\nexport function diagnosticInfoFromTemplateInfo(info: TemplateInfo): DiagnosticTemplateInfo {\n  return {\n    fileName: info.fileName,\n    offset: info.template.span.start,\n    query: info.template.query,\n    members: info.template.members,\n    htmlAst: info.htmlAst,\n    templateAst: info.templateAst\n  };\n}\n\nexport function findTemplateAstAt(\n    ast: TemplateAst[], position: number, allowWidening: boolean = false): TemplateAstPath {\n  const path: TemplateAst[] = [];\n  const visitor = new class extends RecursiveTemplateAstVisitor {\n    visit(ast: TemplateAst, context: any): any {\n      let span = spanOf(ast);\n      if (inSpan(position, span)) {\n        const len = path.length;\n        if (!len || allowWidening || isNarrower(span, spanOf(path[len - 1]))) {\n          path.push(ast);\n        }\n      } else {\n        // Returning a value here will result in the children being skipped.\n        return true;\n      }\n    }\n\n    visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): any {\n      return this.visitChildren(context, visit => {\n        // Ignore reference, variable and providers\n        visit(ast.attrs);\n        visit(ast.directives);\n        visit(ast.children);\n      });\n    }\n\n    visitElement(ast: ElementAst, context: any): any {\n      return this.visitChildren(context, visit => {\n        // Ingnore providers\n        visit(ast.attrs);\n        visit(ast.inputs);\n        visit(ast.outputs);\n        visit(ast.references);\n        visit(ast.directives);\n        visit(ast.children);\n      });\n    }\n\n    visitDirective(ast: DirectiveAst, context: any): any {\n      // Ignore the host properties of a directive\n      const result = this.visitChildren(context, visit => { visit(ast.inputs); });\n      // We never care about the diretive itself, just its inputs.\n      if (path[path.length - 1] == ast) {\n        path.pop();\n      }\n      return result;\n    }\n  };\n\n  templateVisitAll(visitor, ast);\n\n  return new AstPath<TemplateAst>(path, position);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileDirectiveMetadata, CompileMetadataResolver, CompilePipeSummary, NgAnalyzedModules, StaticSymbol} from '@angular/compiler';\nimport {BuiltinType, DeclarationKind, Definition, PipeInfo, Pipes, Signature, Span, Symbol, SymbolDeclaration, SymbolQuery, SymbolTable} from '@angular/compiler-cli';\n\nexport {\n  BuiltinType,\n  DeclarationKind,\n  Definition,\n  PipeInfo,\n  Pipes,\n  Signature,\n  Span,\n  Symbol,\n  SymbolDeclaration,\n  SymbolQuery,\n  SymbolTable\n};\n\n/**\n * The information `LanguageService` needs from the `LanguageServiceHost` to describe the content of\n * a template and the language context the template is in.\n *\n * A host interface; see `LanguageSeriviceHost`.\n *\n * @experimental\n */\nexport interface TemplateSource {\n  /**\n   * The source of the template.\n   */\n  readonly source: string;\n\n  /**\n   * The version of the source. As files are modified the version should change. That is, if the\n   * `LanguageService` requesting template infomration for a source file and that file has changed\n   * since the last time the host was asked for the file then this version string should be\n   * different. No assumptions are made about the format of this string.\n   *\n   * The version can change more often than the source but should not change less often.\n   */\n  readonly version: string;\n\n  /**\n   * The span of the template within the source file.\n   */\n  readonly span: Span;\n\n  /**\n   * A static symbol for the template's component.\n   */\n  readonly type: StaticSymbol;\n\n  /**\n   * The `SymbolTable` for the members of the component.\n   */\n  readonly members: SymbolTable;\n\n  /**\n   * A `SymbolQuery` for the context of the template.\n   */\n  readonly query: SymbolQuery;\n}\n\n/**\n * A sequence of template sources.\n *\n * A host type; see `LanguageSeriviceHost`.\n *\n * @experimental\n */\nexport type TemplateSources = TemplateSource[] | undefined;\n\n\n/**\n * Error information found getting declaration information\n *\n * A host type; see `LanagueServiceHost`.\n *\n * @experimental\n */\nexport interface DeclarationError {\n  /**\n   * The span of the error in the declaration's module.\n   */\n  readonly span: Span;\n\n  /**\n   * The message to display describing the error.\n   */\n  readonly message: string;\n}\n\n/**\n * Information about the component declarations.\n *\n * A file might contain a declaration without a template because the file contains only\n * templateUrl references. However, the compoennt declaration might contain errors that\n * need to be reported such as the template string is missing or the component is not\n * declared in a module. These error should be reported on the declaration, not the\n * template.\n *\n * A host type; see `LanguageSeriviceHost`.\n *\n * @experimental\n */\nexport interface Declaration {\n  /**\n   * The static symbol of the compponent being declared.\n   */\n  readonly type: StaticSymbol;\n\n  /**\n   * The span of the declaration annotation reference (e.g. the 'Component' or 'Directive'\n   * reference).\n   */\n  readonly declarationSpan: Span;\n\n  /**\n   * Reference to the compiler directive metadata for the declaration.\n   */\n  readonly metadata?: CompileDirectiveMetadata;\n\n  /**\n   * Error reported trying to get the metadata.\n   */\n  readonly errors: DeclarationError[];\n}\n\n/**\n * A sequence of declarations.\n *\n * A host type; see `LanguageSeriviceHost`.\n *\n * @experimental\n */\nexport type Declarations = Declaration[];\n\n/**\n * The host for a `LanguageService`. This provides all the `LanguageService` requires to respond\n * to\n * the `LanguageService` requests.\n *\n * This interface describes the requirements of the `LanguageService` on its host.\n *\n * The host interface is host language agnostic.\n *\n * Adding optional member to this interface or any interface that is described as a\n * `LanguageServiceHost` interface is not considered a breaking change as defined by SemVer.\n * Removing a method or changing a member from required to optional will also not be considered a\n * breaking change.\n *\n * If a member is deprecated it will be changed to optional in a minor release before it is\n * removed in a major release.\n *\n * Adding a required member or changing a method's parameters, is considered a breaking change and\n * will only be done when breaking changes are allowed. When possible, a new optional member will\n * be added and the old member will be deprecated. The new member will then be made required in\n * and the old member will be removed only when breaking chnages are allowed.\n *\n * While an interface is marked as experimental breaking-changes will be allowed between minor\n * releases. After an interface is marked as stable breaking-changes will only be allowed between\n * major releases. No breaking changes are allowed between patch releases.\n *\n * @experimental\n */\nexport interface LanguageServiceHost {\n  /**\n   * The resolver to use to find compiler metadata.\n   */\n  readonly resolver: CompileMetadataResolver;\n\n  /**\n   * Returns the template information for templates in `fileName` at the given location. If\n   * `fileName` refers to a template file then the `position` should be ignored. If the `position`\n   * is not in a template literal string then this method should return `undefined`.\n   */\n  getTemplateAt(fileName: string, position: number): TemplateSource|undefined;\n\n  /**\n   * Return the template source information for all templates in `fileName` or for `fileName` if\n   * it\n   * is a template file.\n   */\n  getTemplates(fileName: string): TemplateSources;\n\n  /**\n   * Returns the Angular declarations in the given file.\n   */\n  getDeclarations(fileName: string): Declarations;\n\n  /**\n   * Return a summary of all Angular modules in the project.\n   */\n  getAnalyzedModules(): NgAnalyzedModules;\n\n  /**\n   * Return a list all the template files referenced by the project.\n   */\n  getTemplateReferences(): string[];\n}\n\n/**\n * An item of the completion result to be displayed by an editor.\n *\n * A `LanguageService` interface.\n *\n * @experimental\n */\nexport interface Completion {\n  /**\n   * The kind of comletion.\n   */\n  kind: DeclarationKind;\n\n  /**\n   * The name of the completion to be displayed\n   */\n  name: string;\n\n  /**\n   * The key to use to sort the completions for display.\n   */\n  sort: string;\n}\n\n/**\n * A sequence of completions.\n *\n * @experimental\n */\nexport type Completions = Completion[] | undefined;\n\n/**\n * A file and span.\n */\nexport interface Location {\n  fileName: string;\n  span: Span;\n}\n\n/**\n * The kind of diagnostic message.\n *\n * @experimental\n */\nexport enum DiagnosticKind {\n  Error,\n  Warning,\n}\n\n/**\n * An template diagnostic message to display.\n *\n * @experimental\n */\nexport interface Diagnostic {\n  /**\n   * The kind of diagnostic message\n   */\n  kind: DiagnosticKind;\n\n  /**\n   * The source span that should be highlighted.\n   */\n  span: Span;\n\n  /**\n   * The text of the diagnostic message to display.\n   */\n  message: string;\n}\n\n/**\n * A sequence of diagnostic message.\n *\n * @experimental\n */\nexport type Diagnostics = Diagnostic[];\n\n/**\n * A section of hover text. If the text is code then langauge should be provided.\n * Otherwise the text is assumed to be Markdown text that will be sanitized.\n */\nexport interface HoverTextSection {\n  /**\n   * Source code or markdown text describing the symbol a the hover location.\n   */\n  readonly text: string;\n\n  /**\n   * The langauge of the source if `text` is a souce code fragment.\n   */\n  readonly language?: string;\n}\n\n/**\n * Hover infomration for a symbol at the hover location.\n */\nexport interface Hover {\n  /**\n   * The hover text to display for the symbol at the hover location. If the text includes\n   * source code, the section will specify which langauge it should be interpreted as.\n   */\n  readonly text: HoverTextSection[];\n\n  /**\n   * The span of source the hover covers.\n   */\n  readonly span: Span;\n}\n\n/**\n * An instance of an Angular language service created by `createLanguageService()`.\n *\n * The language service returns information about Angular templates that are included in a project\n * as defined by the `LanguageServiceHost`.\n *\n * When a method expects a `fileName` this file can either be source file in the project that\n * contains a template in a string literal or a template file referenced by the project returned\n * by `getTemplateReference()`. All other files will cause the method to return `undefined`.\n *\n * If a method takes a `position`, it is the offset of the UTF-16 code-point relative to the\n * beginning of the file reference by `fileName`.\n *\n * This interface and all interfaces and types marked as `LanguageService` types, describe  a\n * particlar implementation of the Angular language service and is not intented to be\n * implemented. Adding members to the interface will not be considered a breaking change as\n * defined by SemVer.\n *\n * Removing a member or making a member optional, changing a method parameters, or changing a\n * member's type will all be considered a breaking change.\n *\n * While an interface is marked as experimental breaking-changes will be allowed between minor\n * releases. After an interface is marked as stable breaking-changes will only be allowed between\n * major releases. No breaking changes are allowed between patch releases.\n *\n * @experimental\n */\nexport interface LanguageService {\n  /**\n   * Returns a list of all the external templates referenced by the project.\n   */\n  getTemplateReferences(): string[]|undefined;\n\n  /**\n   * Returns a list of all error for all templates in the given file.\n   */\n  getDiagnostics(fileName: string): Diagnostics|undefined;\n\n  /**\n   * Return the completions at the given position.\n   */\n  getCompletionsAt(fileName: string, position: number): Completions|undefined;\n\n  /**\n   * Return the definition location for the symbol at position.\n   */\n  getDefinitionAt(fileName: string, position: number): Definition|undefined;\n\n  /**\n   * Return the hover information for the symbol at position.\n   */\n  getHoverAt(fileName: string, position: number): Hover|undefined;\n\n  /**\n   * Return the pipes that are available at the given position.\n   */\n  getPipesAt(fileName: string, position: number): CompilePipeSummary[];\n}\n"],"names":["fs.existsSync","version","ts.forEachChild","__extends","path","getExpressionScope"],"mappings":"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"}